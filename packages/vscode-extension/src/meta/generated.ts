// This file is generated by `vscode-ext-gen`. Do not modify manually.
// @see https://github.com/antfu/vscode-ext-gen

// Meta info
export const publisher = 'Alova'
export const name = 'alova-vscode-extension'
export const version = '1.0.9'
export const displayName = 'Alova'
export const description = 'Generate and search APIs without API documentation any more'
export const extensionId = `${publisher}.${name}`

/**
 * Type union of all commands
 */
export type CommandKey
  = | 'alova.refresh'
    | 'alova.create.config'
    | 'alova.apiDocs.refresh'
    | 'alova.snippetSearch.open'
    | 'alova.snippetSearch.insert'
    | 'alova.snippetSearch.showHelp'

/**
 * Commands map registed by `Alova.alova-vscode-extension`
 */
export const commands = {
  /**
   * Generate APIs
   * @value `alova.refresh`
   */
  alovaRefresh: 'alova.refresh',
  /**
   * Create alova config
   * @value `alova.create.config`
   */
  alovaCreateConfig: 'alova.create.config',
  /**
   * Refresh View
   * @value `alova.apiDocs.refresh`
   */
  alovaApiDocsRefresh: 'alova.apiDocs.refresh',
  /**
   * 打开代码片段搜索
   * @value `alova.snippetSearch.open`
   */
  alovaSnippetSearchOpen: 'alova.snippetSearch.open',
  /**
   * 插入代码片段
   * @value `alova.snippetSearch.insert`
   */
  alovaSnippetSearchInsert: 'alova.snippetSearch.insert',
  /**
   * 显示快捷键帮助
   * @value `alova.snippetSearch.showHelp`
   */
  alovaSnippetSearchShowHelp: 'alova.snippetSearch.showHelp',
} satisfies Record<string, CommandKey>

/**
 * Type union of all configs
 */
export type ConfigKey = never

export interface ConfigKeyTypeMap {
}

export interface ConfigShorthandMap {
}

export interface ConfigShorthandTypeMap {
}

export interface ConfigItem<T extends keyof ConfigKeyTypeMap> {
  key: T
  default: ConfigKeyTypeMap[T]
}

/**
 * Configs map registered by `Alova.alova-vscode-extension`
 */
export const configs = {
}

export interface ScopedConfigKeyTypeMap {
}

export const scopedConfigs = {
  scope: 'alova-vscode-extension',
  defaults: {
  } satisfies ScopedConfigKeyTypeMap,
}

export interface NestedConfigs {
}

export interface NestedScopedConfigs {
}
