// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`generate API > should generate code from an url 1`] = `
"/// <reference types='./globals.d.ts' />
/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Petstore - version 1.0.7
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key &#x60;special-key&#x60; to test the authorization filters.
 *
 * OpenAPI version: 3.0.0
 *
 * Contact:
 *
 * NOTE: This file is auto generated by the alova's vscode plugin.
 *
 * https://alova.js.org/devtools/vscode
 *
 * **Do not edit the file manually.**
 */
export default {
  'pet.uploadFile': ['POST', '/pet/{petId}/uploadImage'],
  'pet.addPet': ['POST', '/pet'],
  'pet.updatePet': ['PUT', '/pet'],
  'pet.findPetsByStatus': ['GET', '/pet/findByStatus'],
  'pet.findPetsByTags': ['GET', '/pet/findByTags'],
  'pet.getPetById': ['GET', '/pet/{petId}'],
  'pet.updatePetWithForm': ['POST', '/pet/{petId}'],
  'pet.deletePet': ['DELETE', '/pet/{petId}'],
  'store.getInventory': ['GET', '/store/inventory'],
  'store.placeOrder': ['POST', '/store/order'],
  'store.getOrderById': ['GET', '/store/order/{orderId}'],
  'store.deleteOrder': ['DELETE', '/store/order/{orderId}'],
  'user.createUsersWithListInput': ['POST', '/user/createWithList'],
  'user.getUserByName': ['GET', '/user/{username}'],
  'user.updateUser': ['PUT', '/user/{username}'],
  'user.deleteUser': ['DELETE', '/user/{username}'],
  'user.loginUser': ['GET', '/user/login'],
  'user.logoutUser': ['GET', '/user/logout'],
  'user.createUsersWithArrayInput': ['POST', '/user/createWithArray'],
  'user.createUser': ['POST', '/user']
};
"
`;

exports[`generate API > should generate code from an url 2`] = `
"import { createAlova } from 'alova';
import fetchAdapter from 'alova/fetch';
import { createApis, withConfigType, mountApis } from './createApis';

export const alovaInstance = createAlova({
  baseURL: 'https://petstore.swagger.io/v2',
  requestAdapter: fetchAdapter(),
  beforeRequest: method => {},
  responded: res => {
    return res.json();
  }
});

export const $$userConfigMap = withConfigType({});

const Apis = createApis(alovaInstance, $$userConfigMap);

mountApis(Apis);

export default Apis;
"
`;

exports[`generate API > should generate code from an url 3`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Petstore - version 1.0.7
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key &#x60;special-key&#x60; to test the authorization filters.
 *
 * OpenAPI version: 3.0.0
 *
 * Contact:
 *
 * NOTE: This file is auto generated by the alova's vscode plugin.
 *
 * https://alova.js.org/devtools/vscode
 *
 * **Do not edit the file manually.**
 */
import type { Alova, MethodType, AlovaGenerics, AlovaMethodCreateConfig } from 'alova';
import { Method } from 'alova';
import apiDefinitions from './apiDefinitions';

const createFunctionalProxy = (array: (string | symbol)[], alovaInstance: Alova<AlovaGenerics>, configMap: any) => {
  // create a new proxy instance
  return new Proxy(function () {}, {
    get(_, property) {
      // record the target property, so that it can get the completed accessing paths
      const newArray = [...array, property];
      // always return a new proxy to continue recording accessing paths.
      return createFunctionalProxy(newArray, alovaInstance, configMap);
    },
    apply(_, __, [config]) {
      const apiPathKey = array.join('.') as keyof typeof apiDefinitions;
      const apiItem = apiDefinitions[apiPathKey];
      if (!apiItem) {
        throw new Error(\`the api path of \\\`\${apiPathKey}\\\` is not found\`);
      }
      const mergedConfig = {
        ...configMap[apiPathKey],
        ...config
      };
      const [method, url] = apiItem;
      const pathParams = mergedConfig.pathParams;
      const urlReplaced = url.replace(/\\{([^}]+)\\}/g, (_, key) => {
        const pathParam = pathParams[key];
        return pathParam;
      });
      delete mergedConfig.pathParams;
      let data = mergedConfig.data;
      if (Object.prototype.toString.call(data) === '[object Object]' && typeof FormData !== 'undefined') {
        let hasBlobData = false;
        const formData = new FormData();
        for (const key in data) {
          formData.append(key, data[key]);
          if (data[key] instanceof Blob) {
            hasBlobData = true;
          }
        }
        data = hasBlobData ? formData : data;
      }
      return new Method(method.toUpperCase() as MethodType, alovaInstance, urlReplaced, mergedConfig, data);
    }
  });
};

export const createApis = (alovaInstance: Alova<AlovaGenerics>, configMap: any) => {
  const Apis = new Proxy({} as Apis, {
    get(_, property) {
      return createFunctionalProxy([property], alovaInstance, configMap);
    }
  });
  return Apis;
};
export const mountApis = (Apis: Apis) => {
  // define global variable \`Apis\`
  (globalThis as any).Apis = Apis;
};
type MethodConfig<T> = AlovaMethodCreateConfig<
  (typeof import('./index'))['alovaInstance'] extends Alova<infer AG> ? AG : any,
  any,
  T
>;
type APISofParameters<Tag extends string, Url extends string> = Tag extends keyof Apis
  ? Url extends keyof Apis[Tag]
    ? Apis[Tag][Url] extends (...args: any) => any
      ? Parameters<Apis[Tag][Url]>
      : any
    : any
  : any;
type MethodsConfigMap = {
  [P in keyof typeof import('./apiDefinitions').default]?: MethodConfig<
    P extends \`\${infer Tag}.\${infer Url}\` ? Parameters<NonNullable<APISofParameters<Tag, Url>[0]>['transform']>[0] : any
  >;
};
export const withConfigType = <Config extends MethodsConfigMap>(config: Config) => config;
"
`;

exports[`generate API > should generate code from an url 4`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Petstore - version 1.0.7
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key &#x60;special-key&#x60; to test the authorization filters.
 *
 * OpenAPI version: 3.0.0
 *
 * Contact:
 *
 * NOTE: This file is auto generated by the alova's vscode plugin.
 *
 * https://alova.js.org/devtools/vscode
 *
 * **Do not edit the file manually.**
 */
import type { Alova, AlovaMethodCreateConfig, AlovaGenerics, Method } from 'alova';
import type { $$userConfigMap, alovaInstance } from '.';
import type apiDefinitions from './apiDefinitions';

type CollapsedAlova = typeof alovaInstance;
type UserMethodConfigMap = typeof $$userConfigMap;

type Alova2MethodConfig<Responded> =
  CollapsedAlova extends Alova<
    AlovaGenerics<
      any,
      any,
      infer RequestConfig,
      infer Response,
      infer ResponseHeader,
      infer L1Cache,
      infer L2Cache,
      infer SE
    >
  >
    ? Omit<
        AlovaMethodCreateConfig<
          AlovaGenerics<Responded, any, RequestConfig, Response, ResponseHeader, L1Cache, L2Cache, SE>,
          any,
          Responded
        >,
        'params'
      >
    : never;

// Extract the return type of transform function that define in $$userConfigMap, if it not exists, use the default type.
type ExtractUserDefinedTransformed<
  DefinitionKey extends keyof typeof apiDefinitions,
  Default
> = DefinitionKey extends keyof UserMethodConfigMap
  ? UserMethodConfigMap[DefinitionKey]['transform'] extends (...args: any[]) => any
    ? Awaited<ReturnType<UserMethodConfigMap[DefinitionKey]['transform']>>
    : Default
  : Default;
type Alova2Method<
  Responded,
  DefinitionKey extends keyof typeof apiDefinitions,
  CurrentConfig extends Alova2MethodConfig<any>
> =
  CollapsedAlova extends Alova<
    AlovaGenerics<
      any,
      any,
      infer RequestConfig,
      infer Response,
      infer ResponseHeader,
      infer L1Cache,
      infer L2Cache,
      infer SE
    >
  >
    ? Method<
        AlovaGenerics<
          CurrentConfig extends undefined
            ? ExtractUserDefinedTransformed<DefinitionKey, Responded>
            : CurrentConfig['transform'] extends (...args: any[]) => any
              ? Awaited<ReturnType<CurrentConfig['transform']>>
              : ExtractUserDefinedTransformed<DefinitionKey, Responded>,
          any,
          RequestConfig,
          Response,
          ResponseHeader,
          L1Cache,
          L2Cache,
          SE
        >
      >
    : never;

export interface Category {
  id?: number;
  name?: string;
}
export interface Tag {
  id?: number;
  name?: string;
}
export interface Pet {
  id?: number;
  category?: Category;
  name: string;
  photoUrls: string[];
  tags?: Tag[];
  /**
   * pet status in the store
   */
  status?: 'available' | 'pending' | 'sold';
}
export interface Order {
  id?: number;
  petId?: number;
  quantity?: number;
  shipDate?: string;
  /**
   * Order Status
   */
  status?: 'placed' | 'approved' | 'delivered';
  complete?: boolean;
}
export interface User {
  id?: number;
  username?: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  password?: string;
  phone?: string;
  /**
   * User Status
   */
  userStatus?: number;
}
export interface ApiResponse {
  code?: number;
  type?: string;
  message?: string;
}
declare global {
  interface Apis {
    pet: {
      /**
       * ---
       *
       * [POST] uploads an image
       *
       * **path:** /pet/{petId}/uploadImage
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // ID of pet to update
       *   petId: number
       * }
       * \`\`\`
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   // Additional data to pass to server
       *   additionalMetadata?: string
       *   // file to upload
       *   file?: Blob
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = {
       *   code?: number
       *   type?: string
       *   message?: string
       * }
       * \`\`\`
       */
      uploadFile<
        Config extends Alova2MethodConfig<ApiResponse> & {
          pathParams: {
            /**
             * ID of pet to update
             */
            petId: number;
          };
          data: {
            /**
             * Additional data to pass to server
             */
            additionalMetadata?: string;
            /**
             * file to upload
             */
            file?: Blob;
          };
        }
      >(
        config: Config
      ): Alova2Method<ApiResponse, 'pet.uploadFile', Config>;
      /**
       * ---
       *
       * [POST] Add a new pet to the store
       *
       * **path:** /pet
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   id?: number
       *   category?: {
       *     id?: number
       *     name?: string
       *   }
       *   name: string
       *   // [items] start
       *   // [items] end
       *   photoUrls: string[]
       *   // [items] start
       *   // [items] end
       *   tags?: Array<{
       *     id?: number
       *     name?: string
       *   }>
       *   // pet status in the store
       *   status?: 'available' | 'pending' | 'sold'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = unknown
       * \`\`\`
       */
      addPet<
        Config extends Alova2MethodConfig<unknown> & {
          data: Pet;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'pet.addPet', Config>;
      /**
       * ---
       *
       * [PUT] Update an existing pet
       *
       * **path:** /pet
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   id?: number
       *   category?: {
       *     id?: number
       *     name?: string
       *   }
       *   name: string
       *   // [items] start
       *   // [items] end
       *   photoUrls: string[]
       *   // [items] start
       *   // [items] end
       *   tags?: Array<{
       *     id?: number
       *     name?: string
       *   }>
       *   // pet status in the store
       *   status?: 'available' | 'pending' | 'sold'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = unknown
       * \`\`\`
       */
      updatePet<
        Config extends Alova2MethodConfig<unknown> & {
          data: Pet;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'pet.updatePet', Config>;
      /**
       * ---
       *
       * [GET] Finds Pets by status
       *
       * **path:** /pet/findByStatus
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // Status values that need to be considered for filter
       *   // [items] start
       *   // [items] end
       *   status: ('available' | 'pending' | 'sold')[]
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Array<{
       *   id?: number
       *   category?: {
       *     id?: number
       *     name?: string
       *   }
       *   name: string
       *   // [items] start
       *   // [items] end
       *   photoUrls: string[]
       *   // [items] start
       *   // [items] end
       *   tags?: Array<{
       *     id?: number
       *     name?: string
       *   }>
       *   // pet status in the store
       *   status?: 'available' | 'pending' | 'sold'
       * }>
       * \`\`\`
       */
      findPetsByStatus<
        Config extends Alova2MethodConfig<Pet[]> & {
          params: {
            /**
             * Status values that need to be considered for filter
             */
            status: ('available' | 'pending' | 'sold')[];
          };
        }
      >(
        config: Config
      ): Alova2Method<Pet[], 'pet.findPetsByStatus', Config>;
      /**
       * ---
       *
       * [GET] Finds Pets by tags
       *
       * **path:** /pet/findByTags
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // Tags to filter by
       *   // [items] start
       *   // [items] end
       *   tags: string[]
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Array<{
       *   id?: number
       *   category?: {
       *     id?: number
       *     name?: string
       *   }
       *   name: string
       *   // [items] start
       *   // [items] end
       *   photoUrls: string[]
       *   // [items] start
       *   // [items] end
       *   tags?: Array<{
       *     id?: number
       *     name?: string
       *   }>
       *   // pet status in the store
       *   status?: 'available' | 'pending' | 'sold'
       * }>
       * \`\`\`
       */
      findPetsByTags<
        Config extends Alova2MethodConfig<Pet[]> & {
          params: {
            /**
             * Tags to filter by
             */
            tags: string[];
          };
        }
      >(
        config: Config
      ): Alova2Method<Pet[], 'pet.findPetsByTags', Config>;
      /**
       * ---
       *
       * [GET] Find pet by ID
       *
       * **path:** /pet/{petId}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // ID of pet to return
       *   petId: number
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = {
       *   id?: number
       *   category?: {
       *     id?: number
       *     name?: string
       *   }
       *   name: string
       *   // [items] start
       *   // [items] end
       *   photoUrls: string[]
       *   // [items] start
       *   // [items] end
       *   tags?: Array<{
       *     id?: number
       *     name?: string
       *   }>
       *   // pet status in the store
       *   status?: 'available' | 'pending' | 'sold'
       * }
       * \`\`\`
       */
      getPetById<
        Config extends Alova2MethodConfig<Pet> & {
          pathParams: {
            /**
             * ID of pet to return
             */
            petId: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<Pet, 'pet.getPetById', Config>;
      /**
       * ---
       *
       * [POST] Updates a pet in the store with form data
       *
       * **path:** /pet/{petId}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // ID of pet that needs to be updated
       *   petId: number
       * }
       * \`\`\`
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   // Updated name of the pet
       *   name?: string
       *   // Updated status of the pet
       *   status?: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = unknown
       * \`\`\`
       */
      updatePetWithForm<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * ID of pet that needs to be updated
             */
            petId: number;
          };
          data: {
            /**
             * Updated name of the pet
             */
            name?: string;
            /**
             * Updated status of the pet
             */
            status?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'pet.updatePetWithForm', Config>;
      /**
       * ---
       *
       * [DELETE] Deletes a pet
       *
       * **path:** /pet/{petId}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // Pet id to delete
       *   petId: number
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = unknown
       * \`\`\`
       */
      deletePet<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * Pet id to delete
             */
            petId: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'pet.deletePet', Config>;
    };
    store: {
      /**
       * ---
       *
       * [GET] Returns pet inventories by status
       *
       * **path:** /store/inventory
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Record<string, number>
       * \`\`\`
       */
      getInventory<Config extends Alova2MethodConfig<Record<string, number>>>(
        config?: Config
      ): Alova2Method<Record<string, number>, 'store.getInventory', Config>;
      /**
       * ---
       *
       * [POST] Place an order for a pet
       *
       * **path:** /store/order
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   id?: number
       *   petId?: number
       *   quantity?: number
       *   shipDate?: string
       *   // Order Status
       *   status?: 'placed' | 'approved' | 'delivered'
       *   complete?: boolean
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = {
       *   id?: number
       *   petId?: number
       *   quantity?: number
       *   shipDate?: string
       *   // Order Status
       *   status?: 'placed' | 'approved' | 'delivered'
       *   complete?: boolean
       * }
       * \`\`\`
       */
      placeOrder<
        Config extends Alova2MethodConfig<Order> & {
          data: Order;
        }
      >(
        config: Config
      ): Alova2Method<Order, 'store.placeOrder', Config>;
      /**
       * ---
       *
       * [GET] Find purchase order by ID
       *
       * **path:** /store/order/{orderId}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // ID of pet that needs to be fetched
       *   orderId: number
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = {
       *   id?: number
       *   petId?: number
       *   quantity?: number
       *   shipDate?: string
       *   // Order Status
       *   status?: 'placed' | 'approved' | 'delivered'
       *   complete?: boolean
       * }
       * \`\`\`
       */
      getOrderById<
        Config extends Alova2MethodConfig<Order> & {
          pathParams: {
            /**
             * ID of pet that needs to be fetched
             */
            orderId: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<Order, 'store.getOrderById', Config>;
      /**
       * ---
       *
       * [DELETE] Delete purchase order by ID
       *
       * **path:** /store/order/{orderId}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // ID of the order that needs to be deleted
       *   orderId: number
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = unknown
       * \`\`\`
       */
      deleteOrder<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * ID of the order that needs to be deleted
             */
            orderId: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'store.deleteOrder', Config>;
    };
    user: {
      /**
       * ---
       *
       * [POST] Creates list of users with given input array
       *
       * **path:** /user/createWithList
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = Array<{
       *   id?: number
       *   username?: string
       *   firstName?: string
       *   lastName?: string
       *   email?: string
       *   password?: string
       *   phone?: string
       *   // User Status
       *   userStatus?: number
       * }>
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = null
       * \`\`\`
       */
      createUsersWithListInput<
        Config extends Alova2MethodConfig<null> & {
          data: User[];
        }
      >(
        config: Config
      ): Alova2Method<null, 'user.createUsersWithListInput', Config>;
      /**
       * ---
       *
       * [GET] Get user by user name
       *
       * **path:** /user/{username}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // The name that needs to be fetched. Use user1 for testing.
       *   username: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = {
       *   id?: number
       *   username?: string
       *   firstName?: string
       *   lastName?: string
       *   email?: string
       *   password?: string
       *   phone?: string
       *   // User Status
       *   userStatus?: number
       * }
       * \`\`\`
       */
      getUserByName<
        Config extends Alova2MethodConfig<User> & {
          pathParams: {
            /**
             * The name that needs to be fetched. Use user1 for testing.
             */
            username: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<User, 'user.getUserByName', Config>;
      /**
       * ---
       *
       * [PUT] Updated user
       *
       * **path:** /user/{username}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // name that need to be updated
       *   username: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   id?: number
       *   username?: string
       *   firstName?: string
       *   lastName?: string
       *   email?: string
       *   password?: string
       *   phone?: string
       *   // User Status
       *   userStatus?: number
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = unknown
       * \`\`\`
       */
      updateUser<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * name that need to be updated
             */
            username: string;
          };
          data: User;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'user.updateUser', Config>;
      /**
       * ---
       *
       * [DELETE] Delete user
       *
       * **path:** /user/{username}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // The name that needs to be deleted
       *   username: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = unknown
       * \`\`\`
       */
      deleteUser<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * The name that needs to be deleted
             */
            username: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'user.deleteUser', Config>;
      /**
       * ---
       *
       * [GET] Logs user into the system
       *
       * **path:** /user/login
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // The user name for login
       *   username: string
       *   // The password for login in clear text
       *   password: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string
       * \`\`\`
       */
      loginUser<
        Config extends Alova2MethodConfig<string> & {
          params: {
            /**
             * The user name for login
             */
            username: string;
            /**
             * The password for login in clear text
             */
            password: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<string, 'user.loginUser', Config>;
      /**
       * ---
       *
       * [GET] Logs out current logged in user session
       *
       * **path:** /user/logout
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = null
       * \`\`\`
       */
      logoutUser<Config extends Alova2MethodConfig<null>>(
        config?: Config
      ): Alova2Method<null, 'user.logoutUser', Config>;
      /**
       * ---
       *
       * [POST] Creates list of users with given input array
       *
       * **path:** /user/createWithArray
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = Array<{
       *   id?: number
       *   username?: string
       *   firstName?: string
       *   lastName?: string
       *   email?: string
       *   password?: string
       *   phone?: string
       *   // User Status
       *   userStatus?: number
       * }>
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = null
       * \`\`\`
       */
      createUsersWithArrayInput<
        Config extends Alova2MethodConfig<null> & {
          data: User[];
        }
      >(
        config: Config
      ): Alova2Method<null, 'user.createUsersWithArrayInput', Config>;
      /**
       * ---
       *
       * [POST] Create user
       *
       * **path:** /user
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   id?: number
       *   username?: string
       *   firstName?: string
       *   lastName?: string
       *   email?: string
       *   password?: string
       *   phone?: string
       *   // User Status
       *   userStatus?: number
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = null
       * \`\`\`
       */
      createUser<
        Config extends Alova2MethodConfig<null> & {
          data: User;
        }
      >(
        config: Config
      ): Alova2Method<null, 'user.createUser', Config>;
    };
  }

  var Apis: Apis;
}
"
`;

exports[`generate API > should generate code from an url 5`] = `
"/// <reference types='./globals.d.ts' />
/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Petstore - version 1.0.7
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key &#x60;special-key&#x60; to test the authorization filters.
 *
 * OpenAPI version: 3.0.0
 *
 * Contact:
 *
 * NOTE: This file is auto generated by the alova's vscode plugin.
 *
 * https://alova.js.org/devtools/vscode
 *
 * **Do not edit the file manually.**
 */
export default {
  'pet.uploadFile': ['POST', '/pet/{petId}/uploadImage'],
  'pet.addPet': ['POST', '/pet'],
  'pet.updatePet': ['PUT', '/pet'],
  'pet.findPetsByStatus': ['GET', '/pet/findByStatus'],
  'pet.findPetsByTags': ['GET', '/pet/findByTags'],
  'pet.getPetById': ['GET', '/pet/{petId}'],
  'pet.updatePetWithForm': ['POST', '/pet/{petId}'],
  'pet.deletePet': ['DELETE', '/pet/{petId}'],
  'store.getInventory': ['GET', '/store/inventory'],
  'store.placeOrder': ['POST', '/store/order'],
  'store.getOrderById': ['GET', '/store/order/{orderId}'],
  'store.deleteOrder': ['DELETE', '/store/order/{orderId}'],
  'user.createUsersWithListInput': ['POST', '/user/createWithList'],
  'user.getUserByName': ['GET', '/user/{username}'],
  'user.updateUser': ['PUT', '/user/{username}'],
  'user.deleteUser': ['DELETE', '/user/{username}'],
  'user.loginUser': ['GET', '/user/login'],
  'user.logoutUser': ['GET', '/user/logout'],
  'user.createUsersWithArrayInput': ['POST', '/user/createWithArray'],
  'user.createUser': ['POST', '/user']
};
"
`;

exports[`generate API > should generate code from an url 6`] = `
"import { createAlova } from 'alova';
import fetchAdapter from 'alova/fetch';
import { createApis, withConfigType, mountApis } from './createApis';

export const alovaInstance = createAlova({
  baseURL: 'https://petstore.swagger.io/v2',
  requestAdapter: fetchAdapter(),
  beforeRequest: method => {},
  responded: res => {
    return res.json();
  }
});

export const $$userConfigMap = withConfigType({});

const Apis = createApis(alovaInstance, $$userConfigMap);

mountApis(Apis);

export default Apis;
"
`;

exports[`generate API > should generate code from an url 7`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Petstore - version 1.0.7
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key &#x60;special-key&#x60; to test the authorization filters.
 *
 * OpenAPI version: 3.0.0
 *
 * Contact:
 *
 * NOTE: This file is auto generated by the alova's vscode plugin.
 *
 * https://alova.js.org/devtools/vscode
 *
 * **Do not edit the file manually.**
 */
import type { Alova, MethodType, AlovaGenerics, AlovaMethodCreateConfig } from 'alova';
import { Method } from 'alova';
import apiDefinitions from './apiDefinitions';

const createFunctionalProxy = (array: (string | symbol)[], alovaInstance: Alova<AlovaGenerics>, configMap: any) => {
  // create a new proxy instance
  return new Proxy(function () {}, {
    get(_, property) {
      // record the target property, so that it can get the completed accessing paths
      const newArray = [...array, property];
      // always return a new proxy to continue recording accessing paths.
      return createFunctionalProxy(newArray, alovaInstance, configMap);
    },
    apply(_, __, [config]) {
      const apiPathKey = array.join('.') as keyof typeof apiDefinitions;
      const apiItem = apiDefinitions[apiPathKey];
      if (!apiItem) {
        throw new Error(\`the api path of \\\`\${apiPathKey}\\\` is not found\`);
      }
      const mergedConfig = {
        ...configMap[apiPathKey],
        ...config
      };
      const [method, url] = apiItem;
      const pathParams = mergedConfig.pathParams;
      const urlReplaced = url.replace(/\\{([^}]+)\\}/g, (_, key) => {
        const pathParam = pathParams[key];
        return pathParam;
      });
      delete mergedConfig.pathParams;
      let data = mergedConfig.data;
      if (Object.prototype.toString.call(data) === '[object Object]' && typeof FormData !== 'undefined') {
        let hasBlobData = false;
        const formData = new FormData();
        for (const key in data) {
          formData.append(key, data[key]);
          if (data[key] instanceof Blob) {
            hasBlobData = true;
          }
        }
        data = hasBlobData ? formData : data;
      }
      return new Method(method.toUpperCase() as MethodType, alovaInstance, urlReplaced, mergedConfig, data);
    }
  });
};

export const createApis = (alovaInstance: Alova<AlovaGenerics>, configMap: any) => {
  const Apis = new Proxy({} as Apis, {
    get(_, property) {
      return createFunctionalProxy([property], alovaInstance, configMap);
    }
  });
  return Apis;
};
export const mountApis = (Apis: Apis) => {
  // define global variable \`Apis\`
  (globalThis as any).Apis = Apis;
};
type MethodConfig<T> = AlovaMethodCreateConfig<
  (typeof import('./index'))['alovaInstance'] extends Alova<infer AG> ? AG : any,
  any,
  T
>;
type APISofParameters<Tag extends string, Url extends string> = Tag extends keyof Apis
  ? Url extends keyof Apis[Tag]
    ? Apis[Tag][Url] extends (...args: any) => any
      ? Parameters<Apis[Tag][Url]>
      : any
    : any
  : any;
type MethodsConfigMap = {
  [P in keyof typeof import('./apiDefinitions').default]?: MethodConfig<
    P extends \`\${infer Tag}.\${infer Url}\` ? Parameters<NonNullable<APISofParameters<Tag, Url>[0]>['transform']>[0] : any
  >;
};
export const withConfigType = <Config extends MethodsConfigMap>(config: Config) => config;
"
`;

exports[`generate API > should generate code from an url 8`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Petstore - version 1.0.7
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key &#x60;special-key&#x60; to test the authorization filters.
 *
 * OpenAPI version: 3.0.0
 *
 * Contact:
 *
 * NOTE: This file is auto generated by the alova's vscode plugin.
 *
 * https://alova.js.org/devtools/vscode
 *
 * **Do not edit the file manually.**
 */
import type { Alova, AlovaMethodCreateConfig, AlovaGenerics, Method } from 'alova';
import type { $$userConfigMap, alovaInstance } from '.';
import type apiDefinitions from './apiDefinitions';

type CollapsedAlova = typeof alovaInstance;
type UserMethodConfigMap = typeof $$userConfigMap;

type Alova2MethodConfig<Responded> =
  CollapsedAlova extends Alova<
    AlovaGenerics<
      any,
      any,
      infer RequestConfig,
      infer Response,
      infer ResponseHeader,
      infer L1Cache,
      infer L2Cache,
      infer SE
    >
  >
    ? Omit<
        AlovaMethodCreateConfig<
          AlovaGenerics<Responded, any, RequestConfig, Response, ResponseHeader, L1Cache, L2Cache, SE>,
          any,
          Responded
        >,
        'params'
      >
    : never;

// Extract the return type of transform function that define in $$userConfigMap, if it not exists, use the default type.
type ExtractUserDefinedTransformed<
  DefinitionKey extends keyof typeof apiDefinitions,
  Default
> = DefinitionKey extends keyof UserMethodConfigMap
  ? UserMethodConfigMap[DefinitionKey]['transform'] extends (...args: any[]) => any
    ? Awaited<ReturnType<UserMethodConfigMap[DefinitionKey]['transform']>>
    : Default
  : Default;
type Alova2Method<
  Responded,
  DefinitionKey extends keyof typeof apiDefinitions,
  CurrentConfig extends Alova2MethodConfig<any>
> =
  CollapsedAlova extends Alova<
    AlovaGenerics<
      any,
      any,
      infer RequestConfig,
      infer Response,
      infer ResponseHeader,
      infer L1Cache,
      infer L2Cache,
      infer SE
    >
  >
    ? Method<
        AlovaGenerics<
          CurrentConfig extends undefined
            ? ExtractUserDefinedTransformed<DefinitionKey, Responded>
            : CurrentConfig['transform'] extends (...args: any[]) => any
              ? Awaited<ReturnType<CurrentConfig['transform']>>
              : ExtractUserDefinedTransformed<DefinitionKey, Responded>,
          any,
          RequestConfig,
          Response,
          ResponseHeader,
          L1Cache,
          L2Cache,
          SE
        >
      >
    : never;

export interface Category {
  id?: number;
  name?: string;
}
export interface Tag {
  id?: number;
  name?: string;
}
export interface Pet {
  id?: number;
  category?: Category;
  name: string;
  photoUrls: string[];
  tags?: Tag[];
  /**
   * pet status in the store
   */
  status?: 'available' | 'pending' | 'sold';
}
export interface Order {
  id?: number;
  petId?: number;
  quantity?: number;
  shipDate?: string;
  /**
   * Order Status
   */
  status?: 'placed' | 'approved' | 'delivered';
  complete?: boolean;
}
export interface User {
  id?: number;
  username?: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  password?: string;
  phone?: string;
  /**
   * User Status
   */
  userStatus?: number;
}
export interface ApiResponse {
  code?: number;
  type?: string;
  message?: string;
}
declare global {
  interface Apis {
    pet: {
      /**
       * ---
       *
       * [POST] uploads an image
       *
       * **path:** /pet/{petId}/uploadImage
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // ID of pet to update
       *   petId: number
       * }
       * \`\`\`
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   // Additional data to pass to server
       *   additionalMetadata?: string
       *   // file to upload
       *   file?: Blob
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = {
       *   code?: number
       *   type?: string
       *   message?: string
       * }
       * \`\`\`
       */
      uploadFile<
        Config extends Alova2MethodConfig<ApiResponse> & {
          pathParams: {
            /**
             * ID of pet to update
             */
            petId: number;
          };
          data: {
            /**
             * Additional data to pass to server
             */
            additionalMetadata?: string;
            /**
             * file to upload
             */
            file?: Blob;
          };
        }
      >(
        config: Config
      ): Alova2Method<ApiResponse, 'pet.uploadFile', Config>;
      /**
       * ---
       *
       * [POST] Add a new pet to the store
       *
       * **path:** /pet
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   id?: number
       *   category?: {
       *     id?: number
       *     name?: string
       *   }
       *   name: string
       *   // [items] start
       *   // [items] end
       *   photoUrls: string[]
       *   // [items] start
       *   // [items] end
       *   tags?: Array<{
       *     id?: number
       *     name?: string
       *   }>
       *   // pet status in the store
       *   status?: 'available' | 'pending' | 'sold'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = unknown
       * \`\`\`
       */
      addPet<
        Config extends Alova2MethodConfig<unknown> & {
          data: Pet;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'pet.addPet', Config>;
      /**
       * ---
       *
       * [PUT] Update an existing pet
       *
       * **path:** /pet
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   id?: number
       *   category?: {
       *     id?: number
       *     name?: string
       *   }
       *   name: string
       *   // [items] start
       *   // [items] end
       *   photoUrls: string[]
       *   // [items] start
       *   // [items] end
       *   tags?: Array<{
       *     id?: number
       *     name?: string
       *   }>
       *   // pet status in the store
       *   status?: 'available' | 'pending' | 'sold'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = unknown
       * \`\`\`
       */
      updatePet<
        Config extends Alova2MethodConfig<unknown> & {
          data: Pet;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'pet.updatePet', Config>;
      /**
       * ---
       *
       * [GET] Finds Pets by status
       *
       * **path:** /pet/findByStatus
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // Status values that need to be considered for filter
       *   // [items] start
       *   // [items] end
       *   status: ('available' | 'pending' | 'sold')[]
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Array<{
       *   id?: number
       *   category?: {
       *     id?: number
       *     name?: string
       *   }
       *   name: string
       *   // [items] start
       *   // [items] end
       *   photoUrls: string[]
       *   // [items] start
       *   // [items] end
       *   tags?: Array<{
       *     id?: number
       *     name?: string
       *   }>
       *   // pet status in the store
       *   status?: 'available' | 'pending' | 'sold'
       * }>
       * \`\`\`
       */
      findPetsByStatus<
        Config extends Alova2MethodConfig<Pet[]> & {
          params: {
            /**
             * Status values that need to be considered for filter
             */
            status: ('available' | 'pending' | 'sold')[];
          };
        }
      >(
        config: Config
      ): Alova2Method<Pet[], 'pet.findPetsByStatus', Config>;
      /**
       * ---
       *
       * [GET] Finds Pets by tags
       *
       * **path:** /pet/findByTags
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // Tags to filter by
       *   // [items] start
       *   // [items] end
       *   tags: string[]
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Array<{
       *   id?: number
       *   category?: {
       *     id?: number
       *     name?: string
       *   }
       *   name: string
       *   // [items] start
       *   // [items] end
       *   photoUrls: string[]
       *   // [items] start
       *   // [items] end
       *   tags?: Array<{
       *     id?: number
       *     name?: string
       *   }>
       *   // pet status in the store
       *   status?: 'available' | 'pending' | 'sold'
       * }>
       * \`\`\`
       */
      findPetsByTags<
        Config extends Alova2MethodConfig<Pet[]> & {
          params: {
            /**
             * Tags to filter by
             */
            tags: string[];
          };
        }
      >(
        config: Config
      ): Alova2Method<Pet[], 'pet.findPetsByTags', Config>;
      /**
       * ---
       *
       * [GET] Find pet by ID
       *
       * **path:** /pet/{petId}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // ID of pet to return
       *   petId: number
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = {
       *   id?: number
       *   category?: {
       *     id?: number
       *     name?: string
       *   }
       *   name: string
       *   // [items] start
       *   // [items] end
       *   photoUrls: string[]
       *   // [items] start
       *   // [items] end
       *   tags?: Array<{
       *     id?: number
       *     name?: string
       *   }>
       *   // pet status in the store
       *   status?: 'available' | 'pending' | 'sold'
       * }
       * \`\`\`
       */
      getPetById<
        Config extends Alova2MethodConfig<Pet> & {
          pathParams: {
            /**
             * ID of pet to return
             */
            petId: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<Pet, 'pet.getPetById', Config>;
      /**
       * ---
       *
       * [POST] Updates a pet in the store with form data
       *
       * **path:** /pet/{petId}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // ID of pet that needs to be updated
       *   petId: number
       * }
       * \`\`\`
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   // Updated name of the pet
       *   name?: string
       *   // Updated status of the pet
       *   status?: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = unknown
       * \`\`\`
       */
      updatePetWithForm<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * ID of pet that needs to be updated
             */
            petId: number;
          };
          data: {
            /**
             * Updated name of the pet
             */
            name?: string;
            /**
             * Updated status of the pet
             */
            status?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'pet.updatePetWithForm', Config>;
      /**
       * ---
       *
       * [DELETE] Deletes a pet
       *
       * **path:** /pet/{petId}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // Pet id to delete
       *   petId: number
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = unknown
       * \`\`\`
       */
      deletePet<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * Pet id to delete
             */
            petId: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'pet.deletePet', Config>;
    };
    store: {
      /**
       * ---
       *
       * [GET] Returns pet inventories by status
       *
       * **path:** /store/inventory
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Record<string, number>
       * \`\`\`
       */
      getInventory<Config extends Alova2MethodConfig<Record<string, number>>>(
        config?: Config
      ): Alova2Method<Record<string, number>, 'store.getInventory', Config>;
      /**
       * ---
       *
       * [POST] Place an order for a pet
       *
       * **path:** /store/order
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   id?: number
       *   petId?: number
       *   quantity?: number
       *   shipDate?: string
       *   // Order Status
       *   status?: 'placed' | 'approved' | 'delivered'
       *   complete?: boolean
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = {
       *   id?: number
       *   petId?: number
       *   quantity?: number
       *   shipDate?: string
       *   // Order Status
       *   status?: 'placed' | 'approved' | 'delivered'
       *   complete?: boolean
       * }
       * \`\`\`
       */
      placeOrder<
        Config extends Alova2MethodConfig<Order> & {
          data: Order;
        }
      >(
        config: Config
      ): Alova2Method<Order, 'store.placeOrder', Config>;
      /**
       * ---
       *
       * [GET] Find purchase order by ID
       *
       * **path:** /store/order/{orderId}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // ID of pet that needs to be fetched
       *   orderId: number
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = {
       *   id?: number
       *   petId?: number
       *   quantity?: number
       *   shipDate?: string
       *   // Order Status
       *   status?: 'placed' | 'approved' | 'delivered'
       *   complete?: boolean
       * }
       * \`\`\`
       */
      getOrderById<
        Config extends Alova2MethodConfig<Order> & {
          pathParams: {
            /**
             * ID of pet that needs to be fetched
             */
            orderId: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<Order, 'store.getOrderById', Config>;
      /**
       * ---
       *
       * [DELETE] Delete purchase order by ID
       *
       * **path:** /store/order/{orderId}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // ID of the order that needs to be deleted
       *   orderId: number
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = unknown
       * \`\`\`
       */
      deleteOrder<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * ID of the order that needs to be deleted
             */
            orderId: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'store.deleteOrder', Config>;
    };
    user: {
      /**
       * ---
       *
       * [POST] Creates list of users with given input array
       *
       * **path:** /user/createWithList
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = Array<{
       *   id?: number
       *   username?: string
       *   firstName?: string
       *   lastName?: string
       *   email?: string
       *   password?: string
       *   phone?: string
       *   // User Status
       *   userStatus?: number
       * }>
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = null
       * \`\`\`
       */
      createUsersWithListInput<
        Config extends Alova2MethodConfig<null> & {
          data: User[];
        }
      >(
        config: Config
      ): Alova2Method<null, 'user.createUsersWithListInput', Config>;
      /**
       * ---
       *
       * [GET] Get user by user name
       *
       * **path:** /user/{username}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // The name that needs to be fetched. Use user1 for testing.
       *   username: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = {
       *   id?: number
       *   username?: string
       *   firstName?: string
       *   lastName?: string
       *   email?: string
       *   password?: string
       *   phone?: string
       *   // User Status
       *   userStatus?: number
       * }
       * \`\`\`
       */
      getUserByName<
        Config extends Alova2MethodConfig<User> & {
          pathParams: {
            /**
             * The name that needs to be fetched. Use user1 for testing.
             */
            username: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<User, 'user.getUserByName', Config>;
      /**
       * ---
       *
       * [PUT] Updated user
       *
       * **path:** /user/{username}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // name that need to be updated
       *   username: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   id?: number
       *   username?: string
       *   firstName?: string
       *   lastName?: string
       *   email?: string
       *   password?: string
       *   phone?: string
       *   // User Status
       *   userStatus?: number
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = unknown
       * \`\`\`
       */
      updateUser<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * name that need to be updated
             */
            username: string;
          };
          data: User;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'user.updateUser', Config>;
      /**
       * ---
       *
       * [DELETE] Delete user
       *
       * **path:** /user/{username}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // The name that needs to be deleted
       *   username: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = unknown
       * \`\`\`
       */
      deleteUser<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * The name that needs to be deleted
             */
            username: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'user.deleteUser', Config>;
      /**
       * ---
       *
       * [GET] Logs user into the system
       *
       * **path:** /user/login
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // The user name for login
       *   username: string
       *   // The password for login in clear text
       *   password: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string
       * \`\`\`
       */
      loginUser<
        Config extends Alova2MethodConfig<string> & {
          params: {
            /**
             * The user name for login
             */
            username: string;
            /**
             * The password for login in clear text
             */
            password: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<string, 'user.loginUser', Config>;
      /**
       * ---
       *
       * [GET] Logs out current logged in user session
       *
       * **path:** /user/logout
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = null
       * \`\`\`
       */
      logoutUser<Config extends Alova2MethodConfig<null>>(
        config?: Config
      ): Alova2Method<null, 'user.logoutUser', Config>;
      /**
       * ---
       *
       * [POST] Creates list of users with given input array
       *
       * **path:** /user/createWithArray
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = Array<{
       *   id?: number
       *   username?: string
       *   firstName?: string
       *   lastName?: string
       *   email?: string
       *   password?: string
       *   phone?: string
       *   // User Status
       *   userStatus?: number
       * }>
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = null
       * \`\`\`
       */
      createUsersWithArrayInput<
        Config extends Alova2MethodConfig<null> & {
          data: User[];
        }
      >(
        config: Config
      ): Alova2Method<null, 'user.createUsersWithArrayInput', Config>;
      /**
       * ---
       *
       * [POST] Create user
       *
       * **path:** /user
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   id?: number
       *   username?: string
       *   firstName?: string
       *   lastName?: string
       *   email?: string
       *   password?: string
       *   phone?: string
       *   // User Status
       *   userStatus?: number
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = null
       * \`\`\`
       */
      createUser<
        Config extends Alova2MethodConfig<null> & {
          data: User;
        }
      >(
        config: Config
      ): Alova2Method<null, 'user.createUser', Config>;
    };
  }

  var Apis: Apis;
}
"
`;

exports[`generate API > should generate code from an url 9`] = `
"/// <reference types='./globals.d.ts' />
/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Generator - version 3.0.57
 *
 * This is an online swagger codegen server.  You can find out more at https://github.com/swagger-api/swagger-codegen or on [irc.freenode.net, #swagger](http://swagger.io/irc/).
 *
 * OpenAPI version: 3.0.1
 *
 *
 * NOTE: This file is auto generated by the alova's vscode plugin.
 *
 * https://alova.js.org/devtools/vscode
 *
 * **Do not edit the file manually.**
 */
export default {
  'clients.generateFromURL': ['GET', '/generate'],
  'servers.generateFromURL': ['GET', '/generate'],
  'documentation.generateFromURL': ['GET', '/generate'],
  'config.generateFromURL': ['GET', '/generate'],
  'clients.generate': ['POST', '/generate'],
  'servers.generate': ['POST', '/generate'],
  'documentation.generate': ['POST', '/generate'],
  'config.generate': ['POST', '/generate'],
  'clients.clientLanguages': ['GET', '/clients'],
  'documentation.clientLanguages': ['GET', '/clients'],
  'servers.serverLanguages': ['GET', '/servers'],
  'documentation.documentationLanguages': ['GET', '/documentation'],
  'clients.languages': ['GET', '/{type}/{version}'],
  'servers.languages': ['GET', '/{type}/{version}'],
  'documentation.languages': ['GET', '/{type}/{version}'],
  'config.languages': ['GET', '/{type}/{version}'],
  'clients.languagesMulti': ['GET', '/types'],
  'servers.languagesMulti': ['GET', '/types'],
  'documentation.languagesMulti': ['GET', '/types'],
  'config.languagesMulti': ['GET', '/types'],
  'clients.listOptions': ['GET', '/options'],
  'servers.listOptions': ['GET', '/options'],
  'documentation.listOptions': ['GET', '/options'],
  'config.listOptions': ['GET', '/options'],
  'clients.generateBundle': ['POST', '/model'],
  'servers.generateBundle': ['POST', '/model'],
  'documentation.generateBundle': ['POST', '/model'],
  'config.generateBundle': ['POST', '/model'],
  'documentation.renderTemplate': ['POST', '/render']
};
"
`;

exports[`generate API > should generate code from an url 10`] = `
"import { createAlova } from 'alova';
import fetchAdapter from 'alova/fetch';
import { createApis, withConfigType, mountApis } from './createApis';

export const alovaInstance = createAlova({
  baseURL: '/api1',
  requestAdapter: fetchAdapter(),
  beforeRequest: method => {},
  responded: res => {
    return res.json();
  }
});

export const $$userConfigMap = withConfigType({});

const Apis = createApis(alovaInstance, $$userConfigMap);

mountApis(Apis);

export default Apis;
"
`;

exports[`generate API > should generate code from an url 11`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Generator - version 3.0.57
 *
 * This is an online swagger codegen server.  You can find out more at https://github.com/swagger-api/swagger-codegen or on [irc.freenode.net, #swagger](http://swagger.io/irc/).
 *
 * OpenAPI version: 3.0.1
 *
 *
 * NOTE: This file is auto generated by the alova's vscode plugin.
 *
 * https://alova.js.org/devtools/vscode
 *
 * **Do not edit the file manually.**
 */
import type { Alova, MethodType, AlovaGenerics, AlovaMethodCreateConfig } from 'alova';
import { Method } from 'alova';
import apiDefinitions from './apiDefinitions';

const createFunctionalProxy = (array: (string | symbol)[], alovaInstance: Alova<AlovaGenerics>, configMap: any) => {
  // create a new proxy instance
  return new Proxy(function () {}, {
    get(_, property) {
      // record the target property, so that it can get the completed accessing paths
      const newArray = [...array, property];
      // always return a new proxy to continue recording accessing paths.
      return createFunctionalProxy(newArray, alovaInstance, configMap);
    },
    apply(_, __, [config]) {
      const apiPathKey = array.join('.') as keyof typeof apiDefinitions;
      const apiItem = apiDefinitions[apiPathKey];
      if (!apiItem) {
        throw new Error(\`the api path of \\\`\${apiPathKey}\\\` is not found\`);
      }
      const mergedConfig = {
        ...configMap[apiPathKey],
        ...config
      };
      const [method, url] = apiItem;
      const pathParams = mergedConfig.pathParams;
      const urlReplaced = url.replace(/\\{([^}]+)\\}/g, (_, key) => {
        const pathParam = pathParams[key];
        return pathParam;
      });
      delete mergedConfig.pathParams;
      let data = mergedConfig.data;
      if (Object.prototype.toString.call(data) === '[object Object]' && typeof FormData !== 'undefined') {
        let hasBlobData = false;
        const formData = new FormData();
        for (const key in data) {
          formData.append(key, data[key]);
          if (data[key] instanceof Blob) {
            hasBlobData = true;
          }
        }
        data = hasBlobData ? formData : data;
      }
      return new Method(method.toUpperCase() as MethodType, alovaInstance, urlReplaced, mergedConfig, data);
    }
  });
};

export const createApis = (alovaInstance: Alova<AlovaGenerics>, configMap: any) => {
  const Apis = new Proxy({} as Apis, {
    get(_, property) {
      return createFunctionalProxy([property], alovaInstance, configMap);
    }
  });
  return Apis;
};
export const mountApis = (Apis: Apis) => {
  // define global variable \`Apis\`
  (globalThis as any).Apis = Apis;
};
type MethodConfig<T> = AlovaMethodCreateConfig<
  (typeof import('./index'))['alovaInstance'] extends Alova<infer AG> ? AG : any,
  any,
  T
>;
type APISofParameters<Tag extends string, Url extends string> = Tag extends keyof Apis
  ? Url extends keyof Apis[Tag]
    ? Apis[Tag][Url] extends (...args: any) => any
      ? Parameters<Apis[Tag][Url]>
      : any
    : any
  : any;
type MethodsConfigMap = {
  [P in keyof typeof import('./apiDefinitions').default]?: MethodConfig<
    P extends \`\${infer Tag}.\${infer Url}\` ? Parameters<NonNullable<APISofParameters<Tag, Url>[0]>['transform']>[0] : any
  >;
};
export const withConfigType = <Config extends MethodsConfigMap>(config: Config) => config;
"
`;

exports[`generate API > should generate code from an url 12`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Generator - version 3.0.57
 *
 * This is an online swagger codegen server.  You can find out more at https://github.com/swagger-api/swagger-codegen or on [irc.freenode.net, #swagger](http://swagger.io/irc/).
 *
 * OpenAPI version: 3.0.1
 *
 *
 * NOTE: This file is auto generated by the alova's vscode plugin.
 *
 * https://alova.js.org/devtools/vscode
 *
 * **Do not edit the file manually.**
 */
import type { Alova, AlovaMethodCreateConfig, AlovaGenerics, Method } from 'alova';
import type { $$userConfigMap, alovaInstance } from '.';
import type apiDefinitions from './apiDefinitions';

type CollapsedAlova = typeof alovaInstance;
type UserMethodConfigMap = typeof $$userConfigMap;

type Alova2MethodConfig<Responded> =
  CollapsedAlova extends Alova<
    AlovaGenerics<
      any,
      any,
      infer RequestConfig,
      infer Response,
      infer ResponseHeader,
      infer L1Cache,
      infer L2Cache,
      infer SE
    >
  >
    ? Omit<
        AlovaMethodCreateConfig<
          AlovaGenerics<Responded, any, RequestConfig, Response, ResponseHeader, L1Cache, L2Cache, SE>,
          any,
          Responded
        >,
        'params'
      >
    : never;

// Extract the return type of transform function that define in $$userConfigMap, if it not exists, use the default type.
type ExtractUserDefinedTransformed<
  DefinitionKey extends keyof typeof apiDefinitions,
  Default
> = DefinitionKey extends keyof UserMethodConfigMap
  ? UserMethodConfigMap[DefinitionKey]['transform'] extends (...args: any[]) => any
    ? Awaited<ReturnType<UserMethodConfigMap[DefinitionKey]['transform']>>
    : Default
  : Default;
type Alova2Method<
  Responded,
  DefinitionKey extends keyof typeof apiDefinitions,
  CurrentConfig extends Alova2MethodConfig<any>
> =
  CollapsedAlova extends Alova<
    AlovaGenerics<
      any,
      any,
      infer RequestConfig,
      infer Response,
      infer ResponseHeader,
      infer L1Cache,
      infer L2Cache,
      infer SE
    >
  >
    ? Method<
        AlovaGenerics<
          CurrentConfig extends undefined
            ? ExtractUserDefinedTransformed<DefinitionKey, Responded>
            : CurrentConfig['transform'] extends (...args: any[]) => any
              ? Awaited<ReturnType<CurrentConfig['transform']>>
              : ExtractUserDefinedTransformed<DefinitionKey, Responded>,
          any,
          RequestConfig,
          Response,
          ResponseHeader,
          L1Cache,
          L2Cache,
          SE
        >
      >
    : never;

export interface AuthorizationValue {
  /**
   * Authorization value
   */
  value?: string;
  /**
   * Authorization key
   */
  keyName?: string;
  /**
   * Authorization type
   */
  type?: 'query' | 'header';
}
export interface Options {
  /**
   * authorization
   * ---
   * adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
   */
  auth?: string;
  /**
   * authorization
   * ---
   * adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
   */
  authorizationValue?: AuthorizationValue;
  /**
   * api package
   * ---
   * package for generated api classes
   */
  apiPackage?: string;
  /**
   * Template Version
   * ---
   * template version for generation
   */
  templateVersion?: string;
  /**
   * model package
   * ---
   * package for generated models
   */
  modelPackage?: string;
  /**
   * model name prefix
   * ---
   * Prefix that will be prepended to all model names. Default is the empty string.
   */
  modelNamePrefix?: string;
  /**
   * model name suffix
   * ---
   * PrefixSuffix that will be appended to all model names. Default is the empty string.
   */
  modelNameSuffix?: string;
  /**
   * System Properties
   * ---
   * sets specified system properties in key/value format
   */
  systemProperties?: Record<string, string>;
  /**
   * instantiation types
   * ---
   * sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
   */
  instantiationTypes?: Record<string, string>;
  /**
   * type mappings
   * ---
   * sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
   */
  typeMappings?: Record<string, string>;
  /**
   * additional properties
   * ---
   * sets additional properties that can be referenced by the mustache templates in key/value format.
   */
  additionalProperties?: Record<string, object>;
  /**
   * language specific primitives
   * ---
   * specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
   */
  languageSpecificPrimitives?: string[];
  /**
   * import mappings
   * ---
   * specifies mappings between a given class and the import that should be used for that class in key/value format.
   */
  importMappings?: Record<string, string>;
  /**
   * invoker package
   * ---
   * root package for generated code
   */
  invokerPackage?: string;
  /**
   * group id
   * ---
   * groupId in generated pom.xml
   */
  groupId?: string;
  /**
   * artifact id
   * ---
   * artifactId in generated pom.xml
   */
  artifactId?: string;
  /**
   * artifact version
   * ---
   * artifact version generated in pom.xml
   */
  artifactVersion?: string;
  /**
   * library
   * ---
   * library template (sub-template)
   */
  library?: string;
  /**
   * git user id
   * ---
   * Git user ID, e.g. swagger-api.
   */
  gitUserId?: string;
  /**
   * git repo id
   * ---
   * Git repo ID, e.g. swagger-codegen.
   */
  gitRepoId?: string;
  /**
   * release note
   * ---
   * Release note, default to 'Minor update'.
   */
  releaseNote?: string;
  /**
   * http user agent
   * ---
   * HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
   */
  httpUserAgent?: string;
  /**
   * reserved words mappings
   * ---
   * pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
   */
  reservedWordsMappings?: Record<string, string>;
  /**
   * ignore file override location
   * ---
   * Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
   */
  ignoreFileOverride?: string;
  /**
   * remove prefix of the operationId
   * ---
   * Remove prefix of operationId, e.g. config_getId => getId
   */
  removeOperationIdPrefix?: boolean;
  skipOverride?: boolean;
}
export interface GenerationRequest {
  /**
   * language
   * ---
   * language to generate (required)456
   */
  lang: string;
  /**
   * spec in json format. . Alternative to \`specURL\`
   */
  spec?: object;
  /**
   * URL of the spec in json format. Alternative to \`spec\`
   */
  specURL?: string;
  /**
   * type of the spec
   */
  type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG';
  /**
   * codegen version to use
   */
  codegenVersion?: 'V2' | 'V3';
  options?: Options;
}
export interface RenderRequest {
  /**
   * template
   * ---
   * template as string
   */
  template: string;
  /**
   * context
   * ---
   * context as string
   */
  context: string;
}
export interface CliOption {
  optionName?: string;
  description?: string;
  /**
   * Data type is based on the types supported by the JSON-Schema
   */
  type?: string;
  enum?: Record<string, string>;
  default?: string;
}
declare global {
  interface Apis {
    clients: {
      /**
       * ---
       *
       * [GET] Generates and download code. GenerationRequest input provided as JSON available at URL specified in parameter codegenOptionsURL.
       *
       * **path:** /generate
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   codegenOptionsURL: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Blob
       * \`\`\`
       */
      generateFromURL<
        Config extends Alova2MethodConfig<Blob> & {
          params: {
            codegenOptionsURL: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<Blob, 'clients.generateFromURL', Config>;
      /**
       * ---
       *
       * [POST] Generates and download code. GenerationRequest input provided as request body.
       *
       * **path:** /generate
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   codegenOptionsURL: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Blob
       * \`\`\`
       */
      generate<
        Config extends Alova2MethodConfig<Blob> & {
          params: {
            codegenOptionsURL: string;
          };
          data: GenerationRequest;
        }
      >(
        config: Config
      ): Alova2Method<Blob, 'clients.generate', Config>;
      /**
       * ---
       *
       * [GET] Deprecated, use '/{type}/{version}' instead. List generator languages of type 'client' or 'documentation' for given codegen version (defaults to V3)
       *
       * **path:** /clients
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       *   // flag to only return languages of type \`client\`
       *   clientOnly?: boolean
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      clientLanguages<
        Config extends Alova2MethodConfig<string[]> & {
          params: {
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
            /**
             * flag to only return languages of type \`client\`
             */
            clientOnly?: boolean;
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'clients.clientLanguages', Config>;
      /**
       * ---
       *
       * [GET] List generator languages of the given type and version
       *
       * **path:** /{type}/{version}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // generator type
       *   type: 'client' | 'server' | 'documentation' | 'config'
       *   // generator version used by codegen engine
       *   version: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      languages<
        Config extends Alova2MethodConfig<string[]> & {
          pathParams: {
            /**
             * generator type
             */
            type: 'client' | 'server' | 'documentation' | 'config';
            /**
             * generator version used by codegen engine
             */
            version: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'clients.languages', Config>;
      /**
       * ---
       *
       * [GET] List generator languages of version defined in 'version parameter (defaults to V3) and type included in 'types' parameter; all languages
       *
       * **path:** /types
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // comma-separated list of generator types
       *   // [items] start
       *   // [items] end
       *   types: ('client' | 'server' | 'documentation' | 'config')[]
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      languagesMulti<
        Config extends Alova2MethodConfig<string[]> & {
          params: {
            /**
             * comma-separated list of generator types
             */
            types: ('client' | 'server' | 'documentation' | 'config')[];
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'clients.languagesMulti', Config>;
      /**
       * ---
       *
       * [GET] Returns options for a given language and version (defaults to V3)
       *
       * **path:** /options
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // language
       *   language?: string
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Record<
       *   string,
       *   {
       *     optionName?: string
       *     description?: string
       *     // Data type is based on the types supported by the JSON-Schema
       *     type?: string
       *     enum?: Record<string, string>
       *     default?: string
       *   }
       * >
       * \`\`\`
       */
      listOptions<
        Config extends Alova2MethodConfig<Record<string, CliOption>> & {
          params: {
            /**
             * language
             */
            language?: string;
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<Record<string, CliOption>, 'clients.listOptions', Config>;
      /**
       * ---
       *
       * [POST] 你好Generates the intermediate model ("bundle") and returns it as a JSON. body.
       *
       * **path:** /model
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       */
      generateBundle<
        Config extends Alova2MethodConfig<GenerationRequest> & {
          data: GenerationRequest;
        }
      >(
        config: Config
      ): Alova2Method<GenerationRequest, 'clients.generateBundle', Config>;
    };
    servers: {
      /**
       * ---
       *
       * [GET] Generates and download code. GenerationRequest input provided as JSON available at URL specified in parameter codegenOptionsURL.
       *
       * **path:** /generate
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   codegenOptionsURL: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Blob
       * \`\`\`
       */
      generateFromURL<
        Config extends Alova2MethodConfig<Blob> & {
          params: {
            codegenOptionsURL: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<Blob, 'servers.generateFromURL', Config>;
      /**
       * ---
       *
       * [POST] Generates and download code. GenerationRequest input provided as request body.
       *
       * **path:** /generate
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   codegenOptionsURL: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Blob
       * \`\`\`
       */
      generate<
        Config extends Alova2MethodConfig<Blob> & {
          params: {
            codegenOptionsURL: string;
          };
          data: GenerationRequest;
        }
      >(
        config: Config
      ): Alova2Method<Blob, 'servers.generate', Config>;
      /**
       * ---
       *
       * [GET] Deprecated, use '/{type}/{version}' instead. List generator languages of type 'server' for given codegen version (defaults to V3)
       *
       * **path:** /servers
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      serverLanguages<
        Config extends Alova2MethodConfig<string[]> & {
          params: {
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'servers.serverLanguages', Config>;
      /**
       * ---
       *
       * [GET] List generator languages of the given type and version
       *
       * **path:** /{type}/{version}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // generator type
       *   type: 'client' | 'server' | 'documentation' | 'config'
       *   // generator version used by codegen engine
       *   version: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      languages<
        Config extends Alova2MethodConfig<string[]> & {
          pathParams: {
            /**
             * generator type
             */
            type: 'client' | 'server' | 'documentation' | 'config';
            /**
             * generator version used by codegen engine
             */
            version: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'servers.languages', Config>;
      /**
       * ---
       *
       * [GET] List generator languages of version defined in 'version parameter (defaults to V3) and type included in 'types' parameter; all languages
       *
       * **path:** /types
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // comma-separated list of generator types
       *   // [items] start
       *   // [items] end
       *   types: ('client' | 'server' | 'documentation' | 'config')[]
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      languagesMulti<
        Config extends Alova2MethodConfig<string[]> & {
          params: {
            /**
             * comma-separated list of generator types
             */
            types: ('client' | 'server' | 'documentation' | 'config')[];
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'servers.languagesMulti', Config>;
      /**
       * ---
       *
       * [GET] Returns options for a given language and version (defaults to V3)
       *
       * **path:** /options
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // language
       *   language?: string
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Record<
       *   string,
       *   {
       *     optionName?: string
       *     description?: string
       *     // Data type is based on the types supported by the JSON-Schema
       *     type?: string
       *     enum?: Record<string, string>
       *     default?: string
       *   }
       * >
       * \`\`\`
       */
      listOptions<
        Config extends Alova2MethodConfig<Record<string, CliOption>> & {
          params: {
            /**
             * language
             */
            language?: string;
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<Record<string, CliOption>, 'servers.listOptions', Config>;
      /**
       * ---
       *
       * [POST] 你好Generates the intermediate model ("bundle") and returns it as a JSON. body.
       *
       * **path:** /model
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       */
      generateBundle<
        Config extends Alova2MethodConfig<GenerationRequest> & {
          data: GenerationRequest;
        }
      >(
        config: Config
      ): Alova2Method<GenerationRequest, 'servers.generateBundle', Config>;
    };
    documentation: {
      /**
       * ---
       *
       * [GET] Generates and download code. GenerationRequest input provided as JSON available at URL specified in parameter codegenOptionsURL.
       *
       * **path:** /generate
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   codegenOptionsURL: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Blob
       * \`\`\`
       */
      generateFromURL<
        Config extends Alova2MethodConfig<Blob> & {
          params: {
            codegenOptionsURL: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<Blob, 'documentation.generateFromURL', Config>;
      /**
       * ---
       *
       * [POST] Generates and download code. GenerationRequest input provided as request body.
       *
       * **path:** /generate
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   codegenOptionsURL: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Blob
       * \`\`\`
       */
      generate<
        Config extends Alova2MethodConfig<Blob> & {
          params: {
            codegenOptionsURL: string;
          };
          data: GenerationRequest;
        }
      >(
        config: Config
      ): Alova2Method<Blob, 'documentation.generate', Config>;
      /**
       * ---
       *
       * [GET] Deprecated, use '/{type}/{version}' instead. List generator languages of type 'client' or 'documentation' for given codegen version (defaults to V3)
       *
       * **path:** /clients
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       *   // flag to only return languages of type \`client\`
       *   clientOnly?: boolean
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      clientLanguages<
        Config extends Alova2MethodConfig<string[]> & {
          params: {
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
            /**
             * flag to only return languages of type \`client\`
             */
            clientOnly?: boolean;
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'documentation.clientLanguages', Config>;
      /**
       * ---
       *
       * [GET] Deprecated, use '/{type}/{version}' instead. List generator languages of type 'documentation' for given codegen version (defaults to V3)
       *
       * **path:** /documentation
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      documentationLanguages<
        Config extends Alova2MethodConfig<string[]> & {
          params: {
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'documentation.documentationLanguages', Config>;
      /**
       * ---
       *
       * [GET] List generator languages of the given type and version
       *
       * **path:** /{type}/{version}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // generator type
       *   type: 'client' | 'server' | 'documentation' | 'config'
       *   // generator version used by codegen engine
       *   version: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      languages<
        Config extends Alova2MethodConfig<string[]> & {
          pathParams: {
            /**
             * generator type
             */
            type: 'client' | 'server' | 'documentation' | 'config';
            /**
             * generator version used by codegen engine
             */
            version: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'documentation.languages', Config>;
      /**
       * ---
       *
       * [GET] List generator languages of version defined in 'version parameter (defaults to V3) and type included in 'types' parameter; all languages
       *
       * **path:** /types
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // comma-separated list of generator types
       *   // [items] start
       *   // [items] end
       *   types: ('client' | 'server' | 'documentation' | 'config')[]
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      languagesMulti<
        Config extends Alova2MethodConfig<string[]> & {
          params: {
            /**
             * comma-separated list of generator types
             */
            types: ('client' | 'server' | 'documentation' | 'config')[];
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'documentation.languagesMulti', Config>;
      /**
       * ---
       *
       * [GET] Returns options for a given language and version (defaults to V3)
       *
       * **path:** /options
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // language
       *   language?: string
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Record<
       *   string,
       *   {
       *     optionName?: string
       *     description?: string
       *     // Data type is based on the types supported by the JSON-Schema
       *     type?: string
       *     enum?: Record<string, string>
       *     default?: string
       *   }
       * >
       * \`\`\`
       */
      listOptions<
        Config extends Alova2MethodConfig<Record<string, CliOption>> & {
          params: {
            /**
             * language
             */
            language?: string;
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<Record<string, CliOption>, 'documentation.listOptions', Config>;
      /**
       * ---
       *
       * [POST] 你好Generates the intermediate model ("bundle") and returns it as a JSON. body.
       *
       * **path:** /model
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       */
      generateBundle<
        Config extends Alova2MethodConfig<GenerationRequest> & {
          data: GenerationRequest;
        }
      >(
        config: Config
      ): Alova2Method<GenerationRequest, 'documentation.generateBundle', Config>;
      /**
       * ---
       *
       * [POST] render a template using the provided data
       *
       * **path:** /render
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   // [title] template
       *   // template as string
       *   template: string
       *   // [title] context
       *   // context as string
       *   context: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = null
       * \`\`\`
       */
      renderTemplate<
        Config extends Alova2MethodConfig<null> & {
          data: RenderRequest;
        }
      >(
        config: Config
      ): Alova2Method<null, 'documentation.renderTemplate', Config>;
    };
    config: {
      /**
       * ---
       *
       * [GET] Generates and download code. GenerationRequest input provided as JSON available at URL specified in parameter codegenOptionsURL.
       *
       * **path:** /generate
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   codegenOptionsURL: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Blob
       * \`\`\`
       */
      generateFromURL<
        Config extends Alova2MethodConfig<Blob> & {
          params: {
            codegenOptionsURL: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<Blob, 'config.generateFromURL', Config>;
      /**
       * ---
       *
       * [POST] Generates and download code. GenerationRequest input provided as request body.
       *
       * **path:** /generate
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   codegenOptionsURL: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Blob
       * \`\`\`
       */
      generate<
        Config extends Alova2MethodConfig<Blob> & {
          params: {
            codegenOptionsURL: string;
          };
          data: GenerationRequest;
        }
      >(
        config: Config
      ): Alova2Method<Blob, 'config.generate', Config>;
      /**
       * ---
       *
       * [GET] List generator languages of the given type and version
       *
       * **path:** /{type}/{version}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // generator type
       *   type: 'client' | 'server' | 'documentation' | 'config'
       *   // generator version used by codegen engine
       *   version: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      languages<
        Config extends Alova2MethodConfig<string[]> & {
          pathParams: {
            /**
             * generator type
             */
            type: 'client' | 'server' | 'documentation' | 'config';
            /**
             * generator version used by codegen engine
             */
            version: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'config.languages', Config>;
      /**
       * ---
       *
       * [GET] List generator languages of version defined in 'version parameter (defaults to V3) and type included in 'types' parameter; all languages
       *
       * **path:** /types
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // comma-separated list of generator types
       *   // [items] start
       *   // [items] end
       *   types: ('client' | 'server' | 'documentation' | 'config')[]
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      languagesMulti<
        Config extends Alova2MethodConfig<string[]> & {
          params: {
            /**
             * comma-separated list of generator types
             */
            types: ('client' | 'server' | 'documentation' | 'config')[];
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'config.languagesMulti', Config>;
      /**
       * ---
       *
       * [GET] Returns options for a given language and version (defaults to V3)
       *
       * **path:** /options
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // language
       *   language?: string
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Record<
       *   string,
       *   {
       *     optionName?: string
       *     description?: string
       *     // Data type is based on the types supported by the JSON-Schema
       *     type?: string
       *     enum?: Record<string, string>
       *     default?: string
       *   }
       * >
       * \`\`\`
       */
      listOptions<
        Config extends Alova2MethodConfig<Record<string, CliOption>> & {
          params: {
            /**
             * language
             */
            language?: string;
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<Record<string, CliOption>, 'config.listOptions', Config>;
      /**
       * ---
       *
       * [POST] 你好Generates the intermediate model ("bundle") and returns it as a JSON. body.
       *
       * **path:** /model
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       */
      generateBundle<
        Config extends Alova2MethodConfig<GenerationRequest> & {
          data: GenerationRequest;
        }
      >(
        config: Config
      ): Alova2Method<GenerationRequest, 'config.generateBundle', Config>;
    };
  }

  var Apis: Apis;
}
"
`;

exports[`generate API > should generate code with a variant of openapi file formats 1`] = `
"/// <reference types='./globals.d.ts' />
/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Generator - version 3.0.57
 *
 * This is an online swagger codegen server.  You can find out more at https://github.com/swagger-api/swagger-codegen or on [irc.freenode.net, #swagger](http://swagger.io/irc/).
 *
 * OpenAPI version: 3.0.1
 *
 *
 * NOTE: This file is auto generated by the alova's vscode plugin.
 *
 * https://alova.js.org/devtools/vscode
 *
 * **Do not edit the file manually.**
 */
export default {
  'clients.generateFromURL': ['GET', '/generate'],
  'servers.generateFromURL': ['GET', '/generate'],
  'documentation.generateFromURL': ['GET', '/generate'],
  'config.generateFromURL': ['GET', '/generate'],
  'clients.generate': ['POST', '/generate'],
  'servers.generate': ['POST', '/generate'],
  'documentation.generate': ['POST', '/generate'],
  'config.generate': ['POST', '/generate'],
  'clients.clientLanguages': ['GET', '/clients'],
  'documentation.clientLanguages': ['GET', '/clients'],
  'servers.serverLanguages': ['GET', '/servers'],
  'documentation.documentationLanguages': ['GET', '/documentation'],
  'clients.languages': ['GET', '/{type}/{version}'],
  'servers.languages': ['GET', '/{type}/{version}'],
  'documentation.languages': ['GET', '/{type}/{version}'],
  'config.languages': ['GET', '/{type}/{version}'],
  'clients.languagesMulti': ['GET', '/types'],
  'servers.languagesMulti': ['GET', '/types'],
  'documentation.languagesMulti': ['GET', '/types'],
  'config.languagesMulti': ['GET', '/types'],
  'clients.listOptions': ['GET', '/options'],
  'servers.listOptions': ['GET', '/options'],
  'documentation.listOptions': ['GET', '/options'],
  'config.listOptions': ['GET', '/options'],
  'clients.generateBundle': ['POST', '/model'],
  'servers.generateBundle': ['POST', '/model'],
  'documentation.generateBundle': ['POST', '/model'],
  'config.generateBundle': ['POST', '/model'],
  'documentation.renderTemplate': ['POST', '/render']
};
"
`;

exports[`generate API > should generate code with a variant of openapi file formats 2`] = `
"import { createAlova } from 'alova';
import fetchAdapter from 'alova/fetch';
import { createApis, withConfigType, mountApis } from './createApis';

export const alovaInstance = createAlova({
  baseURL: '/api1',
  requestAdapter: fetchAdapter(),
  beforeRequest: method => {},
  responded: res => {
    return res.json();
  }
});

export const $$userConfigMap = withConfigType({});

const Apis = createApis(alovaInstance, $$userConfigMap);

mountApis(Apis);

export default Apis;
"
`;

exports[`generate API > should generate code with a variant of openapi file formats 3`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Generator - version 3.0.57
 *
 * This is an online swagger codegen server.  You can find out more at https://github.com/swagger-api/swagger-codegen or on [irc.freenode.net, #swagger](http://swagger.io/irc/).
 *
 * OpenAPI version: 3.0.1
 *
 *
 * NOTE: This file is auto generated by the alova's vscode plugin.
 *
 * https://alova.js.org/devtools/vscode
 *
 * **Do not edit the file manually.**
 */
import type { Alova, MethodType, AlovaGenerics, AlovaMethodCreateConfig } from 'alova';
import { Method } from 'alova';
import apiDefinitions from './apiDefinitions';

const createFunctionalProxy = (array: (string | symbol)[], alovaInstance: Alova<AlovaGenerics>, configMap: any) => {
  // create a new proxy instance
  return new Proxy(function () {}, {
    get(_, property) {
      // record the target property, so that it can get the completed accessing paths
      const newArray = [...array, property];
      // always return a new proxy to continue recording accessing paths.
      return createFunctionalProxy(newArray, alovaInstance, configMap);
    },
    apply(_, __, [config]) {
      const apiPathKey = array.join('.') as keyof typeof apiDefinitions;
      const apiItem = apiDefinitions[apiPathKey];
      if (!apiItem) {
        throw new Error(\`the api path of \\\`\${apiPathKey}\\\` is not found\`);
      }
      const mergedConfig = {
        ...configMap[apiPathKey],
        ...config
      };
      const [method, url] = apiItem;
      const pathParams = mergedConfig.pathParams;
      const urlReplaced = url.replace(/\\{([^}]+)\\}/g, (_, key) => {
        const pathParam = pathParams[key];
        return pathParam;
      });
      delete mergedConfig.pathParams;
      let data = mergedConfig.data;
      if (Object.prototype.toString.call(data) === '[object Object]' && typeof FormData !== 'undefined') {
        let hasBlobData = false;
        const formData = new FormData();
        for (const key in data) {
          formData.append(key, data[key]);
          if (data[key] instanceof Blob) {
            hasBlobData = true;
          }
        }
        data = hasBlobData ? formData : data;
      }
      return new Method(method.toUpperCase() as MethodType, alovaInstance, urlReplaced, mergedConfig, data);
    }
  });
};

export const createApis = (alovaInstance: Alova<AlovaGenerics>, configMap: any) => {
  const Apis = new Proxy({} as Apis, {
    get(_, property) {
      return createFunctionalProxy([property], alovaInstance, configMap);
    }
  });
  return Apis;
};
export const mountApis = (Apis: Apis) => {
  // define global variable \`Apis\`
  (globalThis as any).Apis = Apis;
};
type MethodConfig<T> = AlovaMethodCreateConfig<
  (typeof import('./index'))['alovaInstance'] extends Alova<infer AG> ? AG : any,
  any,
  T
>;
type APISofParameters<Tag extends string, Url extends string> = Tag extends keyof Apis
  ? Url extends keyof Apis[Tag]
    ? Apis[Tag][Url] extends (...args: any) => any
      ? Parameters<Apis[Tag][Url]>
      : any
    : any
  : any;
type MethodsConfigMap = {
  [P in keyof typeof import('./apiDefinitions').default]?: MethodConfig<
    P extends \`\${infer Tag}.\${infer Url}\` ? Parameters<NonNullable<APISofParameters<Tag, Url>[0]>['transform']>[0] : any
  >;
};
export const withConfigType = <Config extends MethodsConfigMap>(config: Config) => config;
"
`;

exports[`generate API > should generate code with a variant of openapi file formats 4`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Generator - version 3.0.57
 *
 * This is an online swagger codegen server.  You can find out more at https://github.com/swagger-api/swagger-codegen or on [irc.freenode.net, #swagger](http://swagger.io/irc/).
 *
 * OpenAPI version: 3.0.1
 *
 *
 * NOTE: This file is auto generated by the alova's vscode plugin.
 *
 * https://alova.js.org/devtools/vscode
 *
 * **Do not edit the file manually.**
 */
import type { Alova, AlovaMethodCreateConfig, AlovaGenerics, Method } from 'alova';
import type { $$userConfigMap, alovaInstance } from '.';
import type apiDefinitions from './apiDefinitions';

type CollapsedAlova = typeof alovaInstance;
type UserMethodConfigMap = typeof $$userConfigMap;

type Alova2MethodConfig<Responded> =
  CollapsedAlova extends Alova<
    AlovaGenerics<
      any,
      any,
      infer RequestConfig,
      infer Response,
      infer ResponseHeader,
      infer L1Cache,
      infer L2Cache,
      infer SE
    >
  >
    ? Omit<
        AlovaMethodCreateConfig<
          AlovaGenerics<Responded, any, RequestConfig, Response, ResponseHeader, L1Cache, L2Cache, SE>,
          any,
          Responded
        >,
        'params'
      >
    : never;

// Extract the return type of transform function that define in $$userConfigMap, if it not exists, use the default type.
type ExtractUserDefinedTransformed<
  DefinitionKey extends keyof typeof apiDefinitions,
  Default
> = DefinitionKey extends keyof UserMethodConfigMap
  ? UserMethodConfigMap[DefinitionKey]['transform'] extends (...args: any[]) => any
    ? Awaited<ReturnType<UserMethodConfigMap[DefinitionKey]['transform']>>
    : Default
  : Default;
type Alova2Method<
  Responded,
  DefinitionKey extends keyof typeof apiDefinitions,
  CurrentConfig extends Alova2MethodConfig<any>
> =
  CollapsedAlova extends Alova<
    AlovaGenerics<
      any,
      any,
      infer RequestConfig,
      infer Response,
      infer ResponseHeader,
      infer L1Cache,
      infer L2Cache,
      infer SE
    >
  >
    ? Method<
        AlovaGenerics<
          CurrentConfig extends undefined
            ? ExtractUserDefinedTransformed<DefinitionKey, Responded>
            : CurrentConfig['transform'] extends (...args: any[]) => any
              ? Awaited<ReturnType<CurrentConfig['transform']>>
              : ExtractUserDefinedTransformed<DefinitionKey, Responded>,
          any,
          RequestConfig,
          Response,
          ResponseHeader,
          L1Cache,
          L2Cache,
          SE
        >
      >
    : never;

export interface AuthorizationValue {
  /**
   * Authorization value
   */
  value?: string;
  /**
   * Authorization key
   */
  keyName?: string;
  /**
   * Authorization type
   */
  type?: 'query' | 'header';
}
export interface Options {
  /**
   * authorization
   * ---
   * adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
   */
  auth?: string;
  /**
   * authorization
   * ---
   * adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
   */
  authorizationValue?: AuthorizationValue;
  /**
   * api package
   * ---
   * package for generated api classes
   */
  apiPackage?: string;
  /**
   * Template Version
   * ---
   * template version for generation
   */
  templateVersion?: string;
  /**
   * model package
   * ---
   * package for generated models
   */
  modelPackage?: string;
  /**
   * model name prefix
   * ---
   * Prefix that will be prepended to all model names. Default is the empty string.
   */
  modelNamePrefix?: string;
  /**
   * model name suffix
   * ---
   * PrefixSuffix that will be appended to all model names. Default is the empty string.
   */
  modelNameSuffix?: string;
  /**
   * System Properties
   * ---
   * sets specified system properties in key/value format
   */
  systemProperties?: Record<string, string>;
  /**
   * instantiation types
   * ---
   * sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
   */
  instantiationTypes?: Record<string, string>;
  /**
   * type mappings
   * ---
   * sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
   */
  typeMappings?: Record<string, string>;
  /**
   * additional properties
   * ---
   * sets additional properties that can be referenced by the mustache templates in key/value format.
   */
  additionalProperties?: Record<string, object>;
  /**
   * language specific primitives
   * ---
   * specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
   */
  languageSpecificPrimitives?: string[];
  /**
   * import mappings
   * ---
   * specifies mappings between a given class and the import that should be used for that class in key/value format.
   */
  importMappings?: Record<string, string>;
  /**
   * invoker package
   * ---
   * root package for generated code
   */
  invokerPackage?: string;
  /**
   * group id
   * ---
   * groupId in generated pom.xml
   */
  groupId?: string;
  /**
   * artifact id
   * ---
   * artifactId in generated pom.xml
   */
  artifactId?: string;
  /**
   * artifact version
   * ---
   * artifact version generated in pom.xml
   */
  artifactVersion?: string;
  /**
   * library
   * ---
   * library template (sub-template)
   */
  library?: string;
  /**
   * git user id
   * ---
   * Git user ID, e.g. swagger-api.
   */
  gitUserId?: string;
  /**
   * git repo id
   * ---
   * Git repo ID, e.g. swagger-codegen.
   */
  gitRepoId?: string;
  /**
   * release note
   * ---
   * Release note, default to 'Minor update'.
   */
  releaseNote?: string;
  /**
   * http user agent
   * ---
   * HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
   */
  httpUserAgent?: string;
  /**
   * reserved words mappings
   * ---
   * pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
   */
  reservedWordsMappings?: Record<string, string>;
  /**
   * ignore file override location
   * ---
   * Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
   */
  ignoreFileOverride?: string;
  /**
   * remove prefix of the operationId
   * ---
   * Remove prefix of operationId, e.g. config_getId => getId
   */
  removeOperationIdPrefix?: boolean;
  skipOverride?: boolean;
}
export interface GenerationRequest {
  /**
   * language
   * ---
   * language to generate (required)456
   */
  lang: string;
  /**
   * spec in json format. . Alternative to \`specURL\`
   */
  spec?: object;
  /**
   * URL of the spec in json format. Alternative to \`spec\`
   */
  specURL?: string;
  /**
   * type of the spec
   */
  type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG';
  /**
   * codegen version to use
   */
  codegenVersion?: 'V2' | 'V3';
  options?: Options;
}
export interface RenderRequest {
  /**
   * template
   * ---
   * template as string
   */
  template: string;
  /**
   * context
   * ---
   * context as string
   */
  context: string;
}
export interface CliOption {
  optionName?: string;
  description?: string;
  /**
   * Data type is based on the types supported by the JSON-Schema
   */
  type?: string;
  enum?: Record<string, string>;
  default?: string;
}
declare global {
  interface Apis {
    clients: {
      /**
       * ---
       *
       * [GET] Generates and download code. GenerationRequest input provided as JSON available at URL specified in parameter codegenOptionsURL.
       *
       * **path:** /generate
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   codegenOptionsURL: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Blob
       * \`\`\`
       */
      generateFromURL<
        Config extends Alova2MethodConfig<Blob> & {
          params: {
            codegenOptionsURL: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<Blob, 'clients.generateFromURL', Config>;
      /**
       * ---
       *
       * [POST] Generates and download code. GenerationRequest input provided as request body.
       *
       * **path:** /generate
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   codegenOptionsURL: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Blob
       * \`\`\`
       */
      generate<
        Config extends Alova2MethodConfig<Blob> & {
          params: {
            codegenOptionsURL: string;
          };
          data: GenerationRequest;
        }
      >(
        config: Config
      ): Alova2Method<Blob, 'clients.generate', Config>;
      /**
       * ---
       *
       * [GET] Deprecated, use '/{type}/{version}' instead. List generator languages of type 'client' or 'documentation' for given codegen version (defaults to V3)
       *
       * **path:** /clients
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       *   // flag to only return languages of type \`client\`
       *   clientOnly?: boolean
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      clientLanguages<
        Config extends Alova2MethodConfig<string[]> & {
          params: {
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
            /**
             * flag to only return languages of type \`client\`
             */
            clientOnly?: boolean;
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'clients.clientLanguages', Config>;
      /**
       * ---
       *
       * [GET] List generator languages of the given type and version
       *
       * **path:** /{type}/{version}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // generator type
       *   type: 'client' | 'server' | 'documentation' | 'config'
       *   // generator version used by codegen engine
       *   version: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      languages<
        Config extends Alova2MethodConfig<string[]> & {
          pathParams: {
            /**
             * generator type
             */
            type: 'client' | 'server' | 'documentation' | 'config';
            /**
             * generator version used by codegen engine
             */
            version: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'clients.languages', Config>;
      /**
       * ---
       *
       * [GET] List generator languages of version defined in 'version parameter (defaults to V3) and type included in 'types' parameter; all languages
       *
       * **path:** /types
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // comma-separated list of generator types
       *   // [items] start
       *   // [items] end
       *   types: ('client' | 'server' | 'documentation' | 'config')[]
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      languagesMulti<
        Config extends Alova2MethodConfig<string[]> & {
          params: {
            /**
             * comma-separated list of generator types
             */
            types: ('client' | 'server' | 'documentation' | 'config')[];
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'clients.languagesMulti', Config>;
      /**
       * ---
       *
       * [GET] Returns options for a given language and version (defaults to V3)
       *
       * **path:** /options
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // language
       *   language?: string
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Record<
       *   string,
       *   {
       *     optionName?: string
       *     description?: string
       *     // Data type is based on the types supported by the JSON-Schema
       *     type?: string
       *     enum?: Record<string, string>
       *     default?: string
       *   }
       * >
       * \`\`\`
       */
      listOptions<
        Config extends Alova2MethodConfig<Record<string, CliOption>> & {
          params: {
            /**
             * language
             */
            language?: string;
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<Record<string, CliOption>, 'clients.listOptions', Config>;
      /**
       * ---
       *
       * [POST] 你好Generates the intermediate model ("bundle") and returns it as a JSON. body.
       *
       * **path:** /model
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       */
      generateBundle<
        Config extends Alova2MethodConfig<GenerationRequest> & {
          data: GenerationRequest;
        }
      >(
        config: Config
      ): Alova2Method<GenerationRequest, 'clients.generateBundle', Config>;
    };
    servers: {
      /**
       * ---
       *
       * [GET] Generates and download code. GenerationRequest input provided as JSON available at URL specified in parameter codegenOptionsURL.
       *
       * **path:** /generate
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   codegenOptionsURL: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Blob
       * \`\`\`
       */
      generateFromURL<
        Config extends Alova2MethodConfig<Blob> & {
          params: {
            codegenOptionsURL: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<Blob, 'servers.generateFromURL', Config>;
      /**
       * ---
       *
       * [POST] Generates and download code. GenerationRequest input provided as request body.
       *
       * **path:** /generate
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   codegenOptionsURL: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Blob
       * \`\`\`
       */
      generate<
        Config extends Alova2MethodConfig<Blob> & {
          params: {
            codegenOptionsURL: string;
          };
          data: GenerationRequest;
        }
      >(
        config: Config
      ): Alova2Method<Blob, 'servers.generate', Config>;
      /**
       * ---
       *
       * [GET] Deprecated, use '/{type}/{version}' instead. List generator languages of type 'server' for given codegen version (defaults to V3)
       *
       * **path:** /servers
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      serverLanguages<
        Config extends Alova2MethodConfig<string[]> & {
          params: {
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'servers.serverLanguages', Config>;
      /**
       * ---
       *
       * [GET] List generator languages of the given type and version
       *
       * **path:** /{type}/{version}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // generator type
       *   type: 'client' | 'server' | 'documentation' | 'config'
       *   // generator version used by codegen engine
       *   version: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      languages<
        Config extends Alova2MethodConfig<string[]> & {
          pathParams: {
            /**
             * generator type
             */
            type: 'client' | 'server' | 'documentation' | 'config';
            /**
             * generator version used by codegen engine
             */
            version: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'servers.languages', Config>;
      /**
       * ---
       *
       * [GET] List generator languages of version defined in 'version parameter (defaults to V3) and type included in 'types' parameter; all languages
       *
       * **path:** /types
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // comma-separated list of generator types
       *   // [items] start
       *   // [items] end
       *   types: ('client' | 'server' | 'documentation' | 'config')[]
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      languagesMulti<
        Config extends Alova2MethodConfig<string[]> & {
          params: {
            /**
             * comma-separated list of generator types
             */
            types: ('client' | 'server' | 'documentation' | 'config')[];
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'servers.languagesMulti', Config>;
      /**
       * ---
       *
       * [GET] Returns options for a given language and version (defaults to V3)
       *
       * **path:** /options
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // language
       *   language?: string
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Record<
       *   string,
       *   {
       *     optionName?: string
       *     description?: string
       *     // Data type is based on the types supported by the JSON-Schema
       *     type?: string
       *     enum?: Record<string, string>
       *     default?: string
       *   }
       * >
       * \`\`\`
       */
      listOptions<
        Config extends Alova2MethodConfig<Record<string, CliOption>> & {
          params: {
            /**
             * language
             */
            language?: string;
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<Record<string, CliOption>, 'servers.listOptions', Config>;
      /**
       * ---
       *
       * [POST] 你好Generates the intermediate model ("bundle") and returns it as a JSON. body.
       *
       * **path:** /model
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       */
      generateBundle<
        Config extends Alova2MethodConfig<GenerationRequest> & {
          data: GenerationRequest;
        }
      >(
        config: Config
      ): Alova2Method<GenerationRequest, 'servers.generateBundle', Config>;
    };
    documentation: {
      /**
       * ---
       *
       * [GET] Generates and download code. GenerationRequest input provided as JSON available at URL specified in parameter codegenOptionsURL.
       *
       * **path:** /generate
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   codegenOptionsURL: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Blob
       * \`\`\`
       */
      generateFromURL<
        Config extends Alova2MethodConfig<Blob> & {
          params: {
            codegenOptionsURL: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<Blob, 'documentation.generateFromURL', Config>;
      /**
       * ---
       *
       * [POST] Generates and download code. GenerationRequest input provided as request body.
       *
       * **path:** /generate
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   codegenOptionsURL: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Blob
       * \`\`\`
       */
      generate<
        Config extends Alova2MethodConfig<Blob> & {
          params: {
            codegenOptionsURL: string;
          };
          data: GenerationRequest;
        }
      >(
        config: Config
      ): Alova2Method<Blob, 'documentation.generate', Config>;
      /**
       * ---
       *
       * [GET] Deprecated, use '/{type}/{version}' instead. List generator languages of type 'client' or 'documentation' for given codegen version (defaults to V3)
       *
       * **path:** /clients
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       *   // flag to only return languages of type \`client\`
       *   clientOnly?: boolean
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      clientLanguages<
        Config extends Alova2MethodConfig<string[]> & {
          params: {
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
            /**
             * flag to only return languages of type \`client\`
             */
            clientOnly?: boolean;
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'documentation.clientLanguages', Config>;
      /**
       * ---
       *
       * [GET] Deprecated, use '/{type}/{version}' instead. List generator languages of type 'documentation' for given codegen version (defaults to V3)
       *
       * **path:** /documentation
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      documentationLanguages<
        Config extends Alova2MethodConfig<string[]> & {
          params: {
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'documentation.documentationLanguages', Config>;
      /**
       * ---
       *
       * [GET] List generator languages of the given type and version
       *
       * **path:** /{type}/{version}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // generator type
       *   type: 'client' | 'server' | 'documentation' | 'config'
       *   // generator version used by codegen engine
       *   version: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      languages<
        Config extends Alova2MethodConfig<string[]> & {
          pathParams: {
            /**
             * generator type
             */
            type: 'client' | 'server' | 'documentation' | 'config';
            /**
             * generator version used by codegen engine
             */
            version: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'documentation.languages', Config>;
      /**
       * ---
       *
       * [GET] List generator languages of version defined in 'version parameter (defaults to V3) and type included in 'types' parameter; all languages
       *
       * **path:** /types
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // comma-separated list of generator types
       *   // [items] start
       *   // [items] end
       *   types: ('client' | 'server' | 'documentation' | 'config')[]
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      languagesMulti<
        Config extends Alova2MethodConfig<string[]> & {
          params: {
            /**
             * comma-separated list of generator types
             */
            types: ('client' | 'server' | 'documentation' | 'config')[];
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'documentation.languagesMulti', Config>;
      /**
       * ---
       *
       * [GET] Returns options for a given language and version (defaults to V3)
       *
       * **path:** /options
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // language
       *   language?: string
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Record<
       *   string,
       *   {
       *     optionName?: string
       *     description?: string
       *     // Data type is based on the types supported by the JSON-Schema
       *     type?: string
       *     enum?: Record<string, string>
       *     default?: string
       *   }
       * >
       * \`\`\`
       */
      listOptions<
        Config extends Alova2MethodConfig<Record<string, CliOption>> & {
          params: {
            /**
             * language
             */
            language?: string;
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<Record<string, CliOption>, 'documentation.listOptions', Config>;
      /**
       * ---
       *
       * [POST] 你好Generates the intermediate model ("bundle") and returns it as a JSON. body.
       *
       * **path:** /model
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       */
      generateBundle<
        Config extends Alova2MethodConfig<GenerationRequest> & {
          data: GenerationRequest;
        }
      >(
        config: Config
      ): Alova2Method<GenerationRequest, 'documentation.generateBundle', Config>;
      /**
       * ---
       *
       * [POST] render a template using the provided data
       *
       * **path:** /render
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   // [title] template
       *   // template as string
       *   template: string
       *   // [title] context
       *   // context as string
       *   context: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = null
       * \`\`\`
       */
      renderTemplate<
        Config extends Alova2MethodConfig<null> & {
          data: RenderRequest;
        }
      >(
        config: Config
      ): Alova2Method<null, 'documentation.renderTemplate', Config>;
    };
    config: {
      /**
       * ---
       *
       * [GET] Generates and download code. GenerationRequest input provided as JSON available at URL specified in parameter codegenOptionsURL.
       *
       * **path:** /generate
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   codegenOptionsURL: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Blob
       * \`\`\`
       */
      generateFromURL<
        Config extends Alova2MethodConfig<Blob> & {
          params: {
            codegenOptionsURL: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<Blob, 'config.generateFromURL', Config>;
      /**
       * ---
       *
       * [POST] Generates and download code. GenerationRequest input provided as request body.
       *
       * **path:** /generate
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   codegenOptionsURL: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Blob
       * \`\`\`
       */
      generate<
        Config extends Alova2MethodConfig<Blob> & {
          params: {
            codegenOptionsURL: string;
          };
          data: GenerationRequest;
        }
      >(
        config: Config
      ): Alova2Method<Blob, 'config.generate', Config>;
      /**
       * ---
       *
       * [GET] List generator languages of the given type and version
       *
       * **path:** /{type}/{version}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // generator type
       *   type: 'client' | 'server' | 'documentation' | 'config'
       *   // generator version used by codegen engine
       *   version: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      languages<
        Config extends Alova2MethodConfig<string[]> & {
          pathParams: {
            /**
             * generator type
             */
            type: 'client' | 'server' | 'documentation' | 'config';
            /**
             * generator version used by codegen engine
             */
            version: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'config.languages', Config>;
      /**
       * ---
       *
       * [GET] List generator languages of version defined in 'version parameter (defaults to V3) and type included in 'types' parameter; all languages
       *
       * **path:** /types
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // comma-separated list of generator types
       *   // [items] start
       *   // [items] end
       *   types: ('client' | 'server' | 'documentation' | 'config')[]
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      languagesMulti<
        Config extends Alova2MethodConfig<string[]> & {
          params: {
            /**
             * comma-separated list of generator types
             */
            types: ('client' | 'server' | 'documentation' | 'config')[];
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'config.languagesMulti', Config>;
      /**
       * ---
       *
       * [GET] Returns options for a given language and version (defaults to V3)
       *
       * **path:** /options
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // language
       *   language?: string
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Record<
       *   string,
       *   {
       *     optionName?: string
       *     description?: string
       *     // Data type is based on the types supported by the JSON-Schema
       *     type?: string
       *     enum?: Record<string, string>
       *     default?: string
       *   }
       * >
       * \`\`\`
       */
      listOptions<
        Config extends Alova2MethodConfig<Record<string, CliOption>> & {
          params: {
            /**
             * language
             */
            language?: string;
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<Record<string, CliOption>, 'config.listOptions', Config>;
      /**
       * ---
       *
       * [POST] 你好Generates the intermediate model ("bundle") and returns it as a JSON. body.
       *
       * **path:** /model
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       */
      generateBundle<
        Config extends Alova2MethodConfig<GenerationRequest> & {
          data: GenerationRequest;
        }
      >(
        config: Config
      ): Alova2Method<GenerationRequest, 'config.generateBundle', Config>;
    };
  }

  var Apis: Apis;
}
"
`;

exports[`generate API > should generate code with a variant of openapi file formats 5`] = `
"/// <reference types='./globals.d.ts' />
/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Petstore - version 1.0.7
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key &#x60;special-key&#x60; to test the authorization filters.
 *
 * OpenAPI version: 3.0.0
 *
 * Contact:
 *
 * NOTE: This file is auto generated by the alova's vscode plugin.
 *
 * https://alova.js.org/devtools/vscode
 *
 * **Do not edit the file manually.**
 */
export default {
  'pet.uploadFile': ['POST', '/pet/{petId}/uploadImage'],
  'pet.addPet': ['POST', '/pet'],
  'pet.updatePet': ['PUT', '/pet'],
  'pet.findPetsByStatus': ['GET', '/pet/findByStatus'],
  'pet.findPetsByTags': ['GET', '/pet/findByTags'],
  'pet.getPetById': ['GET', '/pet/{petId}'],
  'pet.updatePetWithForm': ['POST', '/pet/{petId}'],
  'pet.deletePet': ['DELETE', '/pet/{petId}'],
  'store.getInventory': ['GET', '/store/inventory'],
  'store.placeOrder': ['POST', '/store/order'],
  'store.getOrderById': ['GET', '/store/order/{orderId}'],
  'store.deleteOrder': ['DELETE', '/store/order/{orderId}'],
  'user.createUsersWithListInput': ['POST', '/user/createWithList'],
  'user.getUserByName': ['GET', '/user/{username}'],
  'user.updateUser': ['PUT', '/user/{username}'],
  'user.deleteUser': ['DELETE', '/user/{username}'],
  'user.loginUser': ['GET', '/user/login'],
  'user.logoutUser': ['GET', '/user/logout'],
  'user.createUsersWithArrayInput': ['POST', '/user/createWithArray'],
  'user.createUser': ['POST', '/user']
};
"
`;

exports[`generate API > should generate code with a variant of openapi file formats 6`] = `
"import { createAlova } from 'alova';
import fetchAdapter from 'alova/fetch';
import { createApis, withConfigType, mountApis } from './createApis';

export const alovaInstance = createAlova({
  baseURL: 'https://petstore.swagger.io/v2',
  requestAdapter: fetchAdapter(),
  beforeRequest: method => {},
  responded: res => {
    return res.json();
  }
});

export const $$userConfigMap = withConfigType({});

const Apis = createApis(alovaInstance, $$userConfigMap);

mountApis(Apis);

export default Apis;
"
`;

exports[`generate API > should generate code with a variant of openapi file formats 7`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Petstore - version 1.0.7
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key &#x60;special-key&#x60; to test the authorization filters.
 *
 * OpenAPI version: 3.0.0
 *
 * Contact:
 *
 * NOTE: This file is auto generated by the alova's vscode plugin.
 *
 * https://alova.js.org/devtools/vscode
 *
 * **Do not edit the file manually.**
 */
import type { Alova, MethodType, AlovaGenerics, AlovaMethodCreateConfig } from 'alova';
import { Method } from 'alova';
import apiDefinitions from './apiDefinitions';

const createFunctionalProxy = (array: (string | symbol)[], alovaInstance: Alova<AlovaGenerics>, configMap: any) => {
  // create a new proxy instance
  return new Proxy(function () {}, {
    get(_, property) {
      // record the target property, so that it can get the completed accessing paths
      const newArray = [...array, property];
      // always return a new proxy to continue recording accessing paths.
      return createFunctionalProxy(newArray, alovaInstance, configMap);
    },
    apply(_, __, [config]) {
      const apiPathKey = array.join('.') as keyof typeof apiDefinitions;
      const apiItem = apiDefinitions[apiPathKey];
      if (!apiItem) {
        throw new Error(\`the api path of \\\`\${apiPathKey}\\\` is not found\`);
      }
      const mergedConfig = {
        ...configMap[apiPathKey],
        ...config
      };
      const [method, url] = apiItem;
      const pathParams = mergedConfig.pathParams;
      const urlReplaced = url.replace(/\\{([^}]+)\\}/g, (_, key) => {
        const pathParam = pathParams[key];
        return pathParam;
      });
      delete mergedConfig.pathParams;
      let data = mergedConfig.data;
      if (Object.prototype.toString.call(data) === '[object Object]' && typeof FormData !== 'undefined') {
        let hasBlobData = false;
        const formData = new FormData();
        for (const key in data) {
          formData.append(key, data[key]);
          if (data[key] instanceof Blob) {
            hasBlobData = true;
          }
        }
        data = hasBlobData ? formData : data;
      }
      return new Method(method.toUpperCase() as MethodType, alovaInstance, urlReplaced, mergedConfig, data);
    }
  });
};

export const createApis = (alovaInstance: Alova<AlovaGenerics>, configMap: any) => {
  const Apis = new Proxy({} as Apis, {
    get(_, property) {
      return createFunctionalProxy([property], alovaInstance, configMap);
    }
  });
  return Apis;
};
export const mountApis = (Apis: Apis) => {
  // define global variable \`Apis\`
  (globalThis as any).Apis = Apis;
};
type MethodConfig<T> = AlovaMethodCreateConfig<
  (typeof import('./index'))['alovaInstance'] extends Alova<infer AG> ? AG : any,
  any,
  T
>;
type APISofParameters<Tag extends string, Url extends string> = Tag extends keyof Apis
  ? Url extends keyof Apis[Tag]
    ? Apis[Tag][Url] extends (...args: any) => any
      ? Parameters<Apis[Tag][Url]>
      : any
    : any
  : any;
type MethodsConfigMap = {
  [P in keyof typeof import('./apiDefinitions').default]?: MethodConfig<
    P extends \`\${infer Tag}.\${infer Url}\` ? Parameters<NonNullable<APISofParameters<Tag, Url>[0]>['transform']>[0] : any
  >;
};
export const withConfigType = <Config extends MethodsConfigMap>(config: Config) => config;
"
`;

exports[`generate API > should generate code with a variant of openapi file formats 8`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Petstore - version 1.0.7
 *
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key &#x60;special-key&#x60; to test the authorization filters.
 *
 * OpenAPI version: 3.0.0
 *
 * Contact:
 *
 * NOTE: This file is auto generated by the alova's vscode plugin.
 *
 * https://alova.js.org/devtools/vscode
 *
 * **Do not edit the file manually.**
 */
import type { Alova, AlovaMethodCreateConfig, AlovaGenerics, Method } from 'alova';
import type { $$userConfigMap, alovaInstance } from '.';
import type apiDefinitions from './apiDefinitions';

type CollapsedAlova = typeof alovaInstance;
type UserMethodConfigMap = typeof $$userConfigMap;

type Alova2MethodConfig<Responded> =
  CollapsedAlova extends Alova<
    AlovaGenerics<
      any,
      any,
      infer RequestConfig,
      infer Response,
      infer ResponseHeader,
      infer L1Cache,
      infer L2Cache,
      infer SE
    >
  >
    ? Omit<
        AlovaMethodCreateConfig<
          AlovaGenerics<Responded, any, RequestConfig, Response, ResponseHeader, L1Cache, L2Cache, SE>,
          any,
          Responded
        >,
        'params'
      >
    : never;

// Extract the return type of transform function that define in $$userConfigMap, if it not exists, use the default type.
type ExtractUserDefinedTransformed<
  DefinitionKey extends keyof typeof apiDefinitions,
  Default
> = DefinitionKey extends keyof UserMethodConfigMap
  ? UserMethodConfigMap[DefinitionKey]['transform'] extends (...args: any[]) => any
    ? Awaited<ReturnType<UserMethodConfigMap[DefinitionKey]['transform']>>
    : Default
  : Default;
type Alova2Method<
  Responded,
  DefinitionKey extends keyof typeof apiDefinitions,
  CurrentConfig extends Alova2MethodConfig<any>
> =
  CollapsedAlova extends Alova<
    AlovaGenerics<
      any,
      any,
      infer RequestConfig,
      infer Response,
      infer ResponseHeader,
      infer L1Cache,
      infer L2Cache,
      infer SE
    >
  >
    ? Method<
        AlovaGenerics<
          CurrentConfig extends undefined
            ? ExtractUserDefinedTransformed<DefinitionKey, Responded>
            : CurrentConfig['transform'] extends (...args: any[]) => any
              ? Awaited<ReturnType<CurrentConfig['transform']>>
              : ExtractUserDefinedTransformed<DefinitionKey, Responded>,
          any,
          RequestConfig,
          Response,
          ResponseHeader,
          L1Cache,
          L2Cache,
          SE
        >
      >
    : never;

export interface Category {
  id?: number;
  name?: string;
}
export interface Tag {
  id?: number;
  name?: string;
}
export interface Pet {
  id?: number;
  category?: Category;
  name: string;
  photoUrls: string[];
  tags?: Tag[];
  /**
   * pet status in the store
   */
  status?: 'available' | 'pending' | 'sold';
}
export interface Order {
  id?: number;
  petId?: number;
  quantity?: number;
  shipDate?: string;
  /**
   * Order Status
   */
  status?: 'placed' | 'approved' | 'delivered';
  complete?: boolean;
}
export interface User {
  id?: number;
  username?: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  password?: string;
  phone?: string;
  /**
   * User Status
   */
  userStatus?: number;
}
export interface ApiResponse {
  code?: number;
  type?: string;
  message?: string;
}
declare global {
  interface Apis {
    pet: {
      /**
       * ---
       *
       * [POST] uploads an image
       *
       * **path:** /pet/{petId}/uploadImage
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // ID of pet to update
       *   petId: number
       * }
       * \`\`\`
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   // Additional data to pass to server
       *   additionalMetadata?: string
       *   // file to upload
       *   file?: Blob
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = {
       *   code?: number
       *   type?: string
       *   message?: string
       * }
       * \`\`\`
       */
      uploadFile<
        Config extends Alova2MethodConfig<ApiResponse> & {
          pathParams: {
            /**
             * ID of pet to update
             */
            petId: number;
          };
          data: {
            /**
             * Additional data to pass to server
             */
            additionalMetadata?: string;
            /**
             * file to upload
             */
            file?: Blob;
          };
        }
      >(
        config: Config
      ): Alova2Method<ApiResponse, 'pet.uploadFile', Config>;
      /**
       * ---
       *
       * [POST] Add a new pet to the store
       *
       * **path:** /pet
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   id?: number
       *   category?: {
       *     id?: number
       *     name?: string
       *   }
       *   name: string
       *   // [items] start
       *   // [items] end
       *   photoUrls: string[]
       *   // [items] start
       *   // [items] end
       *   tags?: Array<{
       *     id?: number
       *     name?: string
       *   }>
       *   // pet status in the store
       *   status?: 'available' | 'pending' | 'sold'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = unknown
       * \`\`\`
       */
      addPet<
        Config extends Alova2MethodConfig<unknown> & {
          data: Pet;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'pet.addPet', Config>;
      /**
       * ---
       *
       * [PUT] Update an existing pet
       *
       * **path:** /pet
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   id?: number
       *   category?: {
       *     id?: number
       *     name?: string
       *   }
       *   name: string
       *   // [items] start
       *   // [items] end
       *   photoUrls: string[]
       *   // [items] start
       *   // [items] end
       *   tags?: Array<{
       *     id?: number
       *     name?: string
       *   }>
       *   // pet status in the store
       *   status?: 'available' | 'pending' | 'sold'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = unknown
       * \`\`\`
       */
      updatePet<
        Config extends Alova2MethodConfig<unknown> & {
          data: Pet;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'pet.updatePet', Config>;
      /**
       * ---
       *
       * [GET] Finds Pets by status
       *
       * **path:** /pet/findByStatus
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // Status values that need to be considered for filter
       *   // [items] start
       *   // [items] end
       *   status: ('available' | 'pending' | 'sold')[]
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Array<{
       *   id?: number
       *   category?: {
       *     id?: number
       *     name?: string
       *   }
       *   name: string
       *   // [items] start
       *   // [items] end
       *   photoUrls: string[]
       *   // [items] start
       *   // [items] end
       *   tags?: Array<{
       *     id?: number
       *     name?: string
       *   }>
       *   // pet status in the store
       *   status?: 'available' | 'pending' | 'sold'
       * }>
       * \`\`\`
       */
      findPetsByStatus<
        Config extends Alova2MethodConfig<Pet[]> & {
          params: {
            /**
             * Status values that need to be considered for filter
             */
            status: ('available' | 'pending' | 'sold')[];
          };
        }
      >(
        config: Config
      ): Alova2Method<Pet[], 'pet.findPetsByStatus', Config>;
      /**
       * ---
       *
       * [GET] Finds Pets by tags
       *
       * **path:** /pet/findByTags
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // Tags to filter by
       *   // [items] start
       *   // [items] end
       *   tags: string[]
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Array<{
       *   id?: number
       *   category?: {
       *     id?: number
       *     name?: string
       *   }
       *   name: string
       *   // [items] start
       *   // [items] end
       *   photoUrls: string[]
       *   // [items] start
       *   // [items] end
       *   tags?: Array<{
       *     id?: number
       *     name?: string
       *   }>
       *   // pet status in the store
       *   status?: 'available' | 'pending' | 'sold'
       * }>
       * \`\`\`
       */
      findPetsByTags<
        Config extends Alova2MethodConfig<Pet[]> & {
          params: {
            /**
             * Tags to filter by
             */
            tags: string[];
          };
        }
      >(
        config: Config
      ): Alova2Method<Pet[], 'pet.findPetsByTags', Config>;
      /**
       * ---
       *
       * [GET] Find pet by ID
       *
       * **path:** /pet/{petId}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // ID of pet to return
       *   petId: number
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = {
       *   id?: number
       *   category?: {
       *     id?: number
       *     name?: string
       *   }
       *   name: string
       *   // [items] start
       *   // [items] end
       *   photoUrls: string[]
       *   // [items] start
       *   // [items] end
       *   tags?: Array<{
       *     id?: number
       *     name?: string
       *   }>
       *   // pet status in the store
       *   status?: 'available' | 'pending' | 'sold'
       * }
       * \`\`\`
       */
      getPetById<
        Config extends Alova2MethodConfig<Pet> & {
          pathParams: {
            /**
             * ID of pet to return
             */
            petId: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<Pet, 'pet.getPetById', Config>;
      /**
       * ---
       *
       * [POST] Updates a pet in the store with form data
       *
       * **path:** /pet/{petId}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // ID of pet that needs to be updated
       *   petId: number
       * }
       * \`\`\`
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   // Updated name of the pet
       *   name?: string
       *   // Updated status of the pet
       *   status?: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = unknown
       * \`\`\`
       */
      updatePetWithForm<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * ID of pet that needs to be updated
             */
            petId: number;
          };
          data: {
            /**
             * Updated name of the pet
             */
            name?: string;
            /**
             * Updated status of the pet
             */
            status?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'pet.updatePetWithForm', Config>;
      /**
       * ---
       *
       * [DELETE] Deletes a pet
       *
       * **path:** /pet/{petId}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // Pet id to delete
       *   petId: number
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = unknown
       * \`\`\`
       */
      deletePet<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * Pet id to delete
             */
            petId: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'pet.deletePet', Config>;
    };
    store: {
      /**
       * ---
       *
       * [GET] Returns pet inventories by status
       *
       * **path:** /store/inventory
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Record<string, number>
       * \`\`\`
       */
      getInventory<Config extends Alova2MethodConfig<Record<string, number>>>(
        config?: Config
      ): Alova2Method<Record<string, number>, 'store.getInventory', Config>;
      /**
       * ---
       *
       * [POST] Place an order for a pet
       *
       * **path:** /store/order
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   id?: number
       *   petId?: number
       *   quantity?: number
       *   shipDate?: string
       *   // Order Status
       *   status?: 'placed' | 'approved' | 'delivered'
       *   complete?: boolean
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = {
       *   id?: number
       *   petId?: number
       *   quantity?: number
       *   shipDate?: string
       *   // Order Status
       *   status?: 'placed' | 'approved' | 'delivered'
       *   complete?: boolean
       * }
       * \`\`\`
       */
      placeOrder<
        Config extends Alova2MethodConfig<Order> & {
          data: Order;
        }
      >(
        config: Config
      ): Alova2Method<Order, 'store.placeOrder', Config>;
      /**
       * ---
       *
       * [GET] Find purchase order by ID
       *
       * **path:** /store/order/{orderId}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // ID of pet that needs to be fetched
       *   orderId: number
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = {
       *   id?: number
       *   petId?: number
       *   quantity?: number
       *   shipDate?: string
       *   // Order Status
       *   status?: 'placed' | 'approved' | 'delivered'
       *   complete?: boolean
       * }
       * \`\`\`
       */
      getOrderById<
        Config extends Alova2MethodConfig<Order> & {
          pathParams: {
            /**
             * ID of pet that needs to be fetched
             */
            orderId: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<Order, 'store.getOrderById', Config>;
      /**
       * ---
       *
       * [DELETE] Delete purchase order by ID
       *
       * **path:** /store/order/{orderId}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // ID of the order that needs to be deleted
       *   orderId: number
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = unknown
       * \`\`\`
       */
      deleteOrder<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * ID of the order that needs to be deleted
             */
            orderId: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'store.deleteOrder', Config>;
    };
    user: {
      /**
       * ---
       *
       * [POST] Creates list of users with given input array
       *
       * **path:** /user/createWithList
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = Array<{
       *   id?: number
       *   username?: string
       *   firstName?: string
       *   lastName?: string
       *   email?: string
       *   password?: string
       *   phone?: string
       *   // User Status
       *   userStatus?: number
       * }>
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = null
       * \`\`\`
       */
      createUsersWithListInput<
        Config extends Alova2MethodConfig<null> & {
          data: User[];
        }
      >(
        config: Config
      ): Alova2Method<null, 'user.createUsersWithListInput', Config>;
      /**
       * ---
       *
       * [GET] Get user by user name
       *
       * **path:** /user/{username}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // The name that needs to be fetched. Use user1 for testing.
       *   username: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = {
       *   id?: number
       *   username?: string
       *   firstName?: string
       *   lastName?: string
       *   email?: string
       *   password?: string
       *   phone?: string
       *   // User Status
       *   userStatus?: number
       * }
       * \`\`\`
       */
      getUserByName<
        Config extends Alova2MethodConfig<User> & {
          pathParams: {
            /**
             * The name that needs to be fetched. Use user1 for testing.
             */
            username: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<User, 'user.getUserByName', Config>;
      /**
       * ---
       *
       * [PUT] Updated user
       *
       * **path:** /user/{username}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // name that need to be updated
       *   username: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   id?: number
       *   username?: string
       *   firstName?: string
       *   lastName?: string
       *   email?: string
       *   password?: string
       *   phone?: string
       *   // User Status
       *   userStatus?: number
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = unknown
       * \`\`\`
       */
      updateUser<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * name that need to be updated
             */
            username: string;
          };
          data: User;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'user.updateUser', Config>;
      /**
       * ---
       *
       * [DELETE] Delete user
       *
       * **path:** /user/{username}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // The name that needs to be deleted
       *   username: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = unknown
       * \`\`\`
       */
      deleteUser<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * The name that needs to be deleted
             */
            username: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'user.deleteUser', Config>;
      /**
       * ---
       *
       * [GET] Logs user into the system
       *
       * **path:** /user/login
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // The user name for login
       *   username: string
       *   // The password for login in clear text
       *   password: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string
       * \`\`\`
       */
      loginUser<
        Config extends Alova2MethodConfig<string> & {
          params: {
            /**
             * The user name for login
             */
            username: string;
            /**
             * The password for login in clear text
             */
            password: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<string, 'user.loginUser', Config>;
      /**
       * ---
       *
       * [GET] Logs out current logged in user session
       *
       * **path:** /user/logout
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = null
       * \`\`\`
       */
      logoutUser<Config extends Alova2MethodConfig<null>>(
        config?: Config
      ): Alova2Method<null, 'user.logoutUser', Config>;
      /**
       * ---
       *
       * [POST] Creates list of users with given input array
       *
       * **path:** /user/createWithArray
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = Array<{
       *   id?: number
       *   username?: string
       *   firstName?: string
       *   lastName?: string
       *   email?: string
       *   password?: string
       *   phone?: string
       *   // User Status
       *   userStatus?: number
       * }>
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = null
       * \`\`\`
       */
      createUsersWithArrayInput<
        Config extends Alova2MethodConfig<null> & {
          data: User[];
        }
      >(
        config: Config
      ): Alova2Method<null, 'user.createUsersWithArrayInput', Config>;
      /**
       * ---
       *
       * [POST] Create user
       *
       * **path:** /user
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   id?: number
       *   username?: string
       *   firstName?: string
       *   lastName?: string
       *   email?: string
       *   password?: string
       *   phone?: string
       *   // User Status
       *   userStatus?: number
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = null
       * \`\`\`
       */
      createUser<
        Config extends Alova2MethodConfig<null> & {
          data: User;
        }
      >(
        config: Config
      ): Alova2Method<null, 'user.createUser', Config>;
    };
  }

  var Apis: Apis;
}
"
`;

exports[`generate API > should generate code with a variant of openapi file formats 9`] = `
"/// <reference types='./globals.d.ts' />
/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI Petstore - version 1.0.0
 *
 * This is a sample server Petstore server. For this sample, you can use the api key &#x60;special-key&#x60; to test the authorization filters.
 *
 * OpenAPI version: 3.0.0
 *
 * Contact:
 *
 * NOTE: This file is auto generated by the alova's vscode plugin.
 *
 * https://alova.js.org/devtools/vscode
 *
 * **Do not edit the file manually.**
 */
export default {
  'tag.pet24': ['POST', '/pet'],
  'pet.updatePet': ['PUT', '/pet'],
  'pet.findPetsByStatus': ['GET', '/pet/findByStatus'],
  'pet.findPetsByTags': ['GET', '/pet/findByTags'],
  'pet.getPetById': ['GET', '/pet/{petId}'],
  'pet.updatePetWithForm': ['POST', '/pet/{petId}'],
  'pet.deletePet': ['DELETE', '/pet/{petId}'],
  'pet.uploadFile': ['POST', '/pet/{petId}/uploadImage'],
  'store.getInventory': ['GET', '/store/inventory'],
  'store.placeOrder': ['POST', '/store/order'],
  'store.getOrderById': ['GET', '/store/order/{orderId}'],
  'store.deleteOrder': ['DELETE', '/store/order/{orderId}'],
  'user.createUser': ['POST', '/user'],
  'user.createUsersWithArrayInput': ['POST', '/user/createWithArray'],
  'user.createUsersWithListInput': ['POST', '/user/createWithList'],
  'user.loginUser': ['GET', '/user/login'],
  'user.logoutUser': ['GET', '/user/logout'],
  'user.getUserByName': ['GET', '/user/{username}'],
  'user.updateUser': ['PUT', '/user/{username}'],
  'user.deleteUser': ['DELETE', '/user/{username}']
};
"
`;

exports[`generate API > should generate code with a variant of openapi file formats 10`] = `
"import { createAlova } from 'alova';
import fetchAdapter from 'alova/fetch';
import { createApis, withConfigType, mountApis } from './createApis';

export const alovaInstance = createAlova({
  baseURL: 'http://petstore.swagger.io/v2',
  requestAdapter: fetchAdapter(),
  beforeRequest: method => {},
  responded: res => {
    return res.json();
  }
});

export const $$userConfigMap = withConfigType({});

const Apis = createApis(alovaInstance, $$userConfigMap);

mountApis(Apis);

export default Apis;
"
`;

exports[`generate API > should generate code with a variant of openapi file formats 11`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI Petstore - version 1.0.0
 *
 * This is a sample server Petstore server. For this sample, you can use the api key &#x60;special-key&#x60; to test the authorization filters.
 *
 * OpenAPI version: 3.0.0
 *
 * Contact:
 *
 * NOTE: This file is auto generated by the alova's vscode plugin.
 *
 * https://alova.js.org/devtools/vscode
 *
 * **Do not edit the file manually.**
 */
import type { Alova, MethodType, AlovaGenerics, AlovaMethodCreateConfig } from 'alova';
import { Method } from 'alova';
import apiDefinitions from './apiDefinitions';

const createFunctionalProxy = (array: (string | symbol)[], alovaInstance: Alova<AlovaGenerics>, configMap: any) => {
  // create a new proxy instance
  return new Proxy(function () {}, {
    get(_, property) {
      // record the target property, so that it can get the completed accessing paths
      const newArray = [...array, property];
      // always return a new proxy to continue recording accessing paths.
      return createFunctionalProxy(newArray, alovaInstance, configMap);
    },
    apply(_, __, [config]) {
      const apiPathKey = array.join('.') as keyof typeof apiDefinitions;
      const apiItem = apiDefinitions[apiPathKey];
      if (!apiItem) {
        throw new Error(\`the api path of \\\`\${apiPathKey}\\\` is not found\`);
      }
      const mergedConfig = {
        ...configMap[apiPathKey],
        ...config
      };
      const [method, url] = apiItem;
      const pathParams = mergedConfig.pathParams;
      const urlReplaced = url.replace(/\\{([^}]+)\\}/g, (_, key) => {
        const pathParam = pathParams[key];
        return pathParam;
      });
      delete mergedConfig.pathParams;
      let data = mergedConfig.data;
      if (Object.prototype.toString.call(data) === '[object Object]' && typeof FormData !== 'undefined') {
        let hasBlobData = false;
        const formData = new FormData();
        for (const key in data) {
          formData.append(key, data[key]);
          if (data[key] instanceof Blob) {
            hasBlobData = true;
          }
        }
        data = hasBlobData ? formData : data;
      }
      return new Method(method.toUpperCase() as MethodType, alovaInstance, urlReplaced, mergedConfig, data);
    }
  });
};

export const createApis = (alovaInstance: Alova<AlovaGenerics>, configMap: any) => {
  const Apis = new Proxy({} as Apis, {
    get(_, property) {
      return createFunctionalProxy([property], alovaInstance, configMap);
    }
  });
  return Apis;
};
export const mountApis = (Apis: Apis) => {
  // define global variable \`Apis\`
  (globalThis as any).Apis = Apis;
};
type MethodConfig<T> = AlovaMethodCreateConfig<
  (typeof import('./index'))['alovaInstance'] extends Alova<infer AG> ? AG : any,
  any,
  T
>;
type APISofParameters<Tag extends string, Url extends string> = Tag extends keyof Apis
  ? Url extends keyof Apis[Tag]
    ? Apis[Tag][Url] extends (...args: any) => any
      ? Parameters<Apis[Tag][Url]>
      : any
    : any
  : any;
type MethodsConfigMap = {
  [P in keyof typeof import('./apiDefinitions').default]?: MethodConfig<
    P extends \`\${infer Tag}.\${infer Url}\` ? Parameters<NonNullable<APISofParameters<Tag, Url>[0]>['transform']>[0] : any
  >;
};
export const withConfigType = <Config extends MethodsConfigMap>(config: Config) => config;
"
`;

exports[`generate API > should generate code with a variant of openapi file formats 12`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI Petstore - version 1.0.0
 *
 * This is a sample server Petstore server. For this sample, you can use the api key &#x60;special-key&#x60; to test the authorization filters.
 *
 * OpenAPI version: 3.0.0
 *
 * Contact:
 *
 * NOTE: This file is auto generated by the alova's vscode plugin.
 *
 * https://alova.js.org/devtools/vscode
 *
 * **Do not edit the file manually.**
 */
import type { Alova, AlovaMethodCreateConfig, AlovaGenerics, Method } from 'alova';
import type { $$userConfigMap, alovaInstance } from '.';
import type apiDefinitions from './apiDefinitions';

type CollapsedAlova = typeof alovaInstance;
type UserMethodConfigMap = typeof $$userConfigMap;

type Alova2MethodConfig<Responded> =
  CollapsedAlova extends Alova<
    AlovaGenerics<
      any,
      any,
      infer RequestConfig,
      infer Response,
      infer ResponseHeader,
      infer L1Cache,
      infer L2Cache,
      infer SE
    >
  >
    ? Omit<
        AlovaMethodCreateConfig<
          AlovaGenerics<Responded, any, RequestConfig, Response, ResponseHeader, L1Cache, L2Cache, SE>,
          any,
          Responded
        >,
        'params'
      >
    : never;

// Extract the return type of transform function that define in $$userConfigMap, if it not exists, use the default type.
type ExtractUserDefinedTransformed<
  DefinitionKey extends keyof typeof apiDefinitions,
  Default
> = DefinitionKey extends keyof UserMethodConfigMap
  ? UserMethodConfigMap[DefinitionKey]['transform'] extends (...args: any[]) => any
    ? Awaited<ReturnType<UserMethodConfigMap[DefinitionKey]['transform']>>
    : Default
  : Default;
type Alova2Method<
  Responded,
  DefinitionKey extends keyof typeof apiDefinitions,
  CurrentConfig extends Alova2MethodConfig<any>
> =
  CollapsedAlova extends Alova<
    AlovaGenerics<
      any,
      any,
      infer RequestConfig,
      infer Response,
      infer ResponseHeader,
      infer L1Cache,
      infer L2Cache,
      infer SE
    >
  >
    ? Method<
        AlovaGenerics<
          CurrentConfig extends undefined
            ? ExtractUserDefinedTransformed<DefinitionKey, Responded>
            : CurrentConfig['transform'] extends (...args: any[]) => any
              ? Awaited<ReturnType<CurrentConfig['transform']>>
              : ExtractUserDefinedTransformed<DefinitionKey, Responded>,
          any,
          RequestConfig,
          Response,
          ResponseHeader,
          L1Cache,
          L2Cache,
          SE
        >
      >
    : never;

export interface Category {
  id?: number;
  name?: string;
}
export interface Tag {
  id?: number;
  name?: string;
}
export interface Pet {
  id?: number;
  /**
   * Pet category
   * ---
   * A category for a pet
   */
  category?: Category;
  name: string;
  photoUrls: string[];
  tags?: Tag[];
  /**
   * pet status in the store
   * @deprecated
   */
  status?: 'available' | 'pending' | 'sold';
}
export interface Order {
  id?: number;
  petId?: number;
  quantity?: number;
  shipDate?: string;
  /**
   * Order Status
   */
  status?: 'placed' | 'approved' | 'delivered';
  complete?: boolean;
}
export interface User {
  id?: number;
  username?: string;
  firstName?: string;
  lastName?: string;
  email?: string;
  password?: string;
  phone?: string;
  /**
   * User Status
   */
  userStatus?: number;
}
export interface ApiResponse {
  code?: number;
  type?: string;
  message?: string;
}
declare global {
  interface Apis {
    tag: {
      /**
       * ---
       *
       * [POST] Add a new pet to the store 2
       *
       * **path:** /pet
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   id?: number
       *   // [title] Pet category
       *   // A category for a pet
       *   category?: {
       *     id?: number
       *     name?: string
       *   }
       *   name: string
       *   // [items] start
       *   // [items] end
       *   photoUrls: string[]
       *   // [items] start
       *   // [title] Pet Tag
       *   // A tag for a pet
       *   // [items] end
       *   tags?: Array<{
       *     id?: number
       *     name?: string
       *   }>
       *   // pet status in the store
       *   // [deprecated]
       *   status?: 'available' | 'pending' | 'sold'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = {
       *   id?: number
       *   // [title] Pet category
       *   // A category for a pet
       *   category?: {
       *     id?: number
       *     name?: string
       *   }
       *   name: string
       *   // [items] start
       *   // [items] end
       *   photoUrls: string[]
       *   // [items] start
       *   // [title] Pet Tag
       *   // A tag for a pet
       *   // [items] end
       *   tags?: Array<{
       *     id?: number
       *     name?: string
       *   }>
       *   // pet status in the store
       *   // [deprecated]
       *   status?: 'available' | 'pending' | 'sold'
       * }
       * \`\`\`
       */
      pet24<
        Config extends Alova2MethodConfig<Pet> & {
          data: Pet;
        }
      >(
        config: Config
      ): Alova2Method<Pet, 'tag.pet24', Config>;
    };
    pet: {
      /**
       * ---
       *
       * [PUT] Update an existing pet 2
       *
       * **path:** /pet
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   id?: number
       *   // [title] Pet category
       *   // A category for a pet
       *   category?: {
       *     id?: number
       *     name?: string
       *   }
       *   name: string
       *   // [items] start
       *   // [items] end
       *   photoUrls: string[]
       *   // [items] start
       *   // [title] Pet Tag
       *   // A tag for a pet
       *   // [items] end
       *   tags?: Array<{
       *     id?: number
       *     name?: string
       *   }>
       *   // pet status in the store
       *   // [deprecated]
       *   status?: 'available' | 'pending' | 'sold'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = {
       *   id?: number
       *   // [title] Pet category
       *   // A category for a pet
       *   category?: {
       *     id?: number
       *     name?: string
       *   }
       *   name: string
       *   // [items] start
       *   // [items] end
       *   photoUrls: string[]
       *   // [items] start
       *   // [title] Pet Tag
       *   // A tag for a pet
       *   // [items] end
       *   tags?: Array<{
       *     id?: number
       *     name?: string
       *   }>
       *   // pet status in the store
       *   // [deprecated]
       *   status?: 'available' | 'pending' | 'sold'
       * }
       * \`\`\`
       */
      updatePet<
        Config extends Alova2MethodConfig<Pet> & {
          data: Pet;
        }
      >(
        config: Config
      ): Alova2Method<Pet, 'pet.updatePet', Config>;
      /**
       * ---
       *
       * [GET] Finds Pets by status
       *
       * **path:** /pet/findByStatus
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // Status values that need to be considered for filter
       *   // [items] start
       *   // [items] end
       *   // [deprecated]
       *   status: ('available' | 'pending' | 'sold')[]
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Array<{
       *   id?: number
       *   // [title] Pet category
       *   // A category for a pet
       *   category?: {
       *     id?: number
       *     name?: string
       *   }
       *   name: string
       *   // [items] start
       *   // [items] end
       *   photoUrls: string[]
       *   // [items] start
       *   // [title] Pet Tag
       *   // A tag for a pet
       *   // [items] end
       *   tags?: Array<{
       *     id?: number
       *     name?: string
       *   }>
       *   // pet status in the store
       *   // [deprecated]
       *   status?: 'available' | 'pending' | 'sold'
       * }>
       * \`\`\`
       */
      findPetsByStatus<
        Config extends Alova2MethodConfig<Pet[]> & {
          params: {
            /**
             * Status values that need to be considered for filter
             * @deprecated
             */
            status: ('available' | 'pending' | 'sold')[];
          };
        }
      >(
        config: Config
      ): Alova2Method<Pet[], 'pet.findPetsByStatus', Config>;
      /**
       * ---
       *
       * [GET] Finds Pets by tags
       *
       * **path:** /pet/findByTags
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // Tags to filter by
       *   // [items] start
       *   // [items] end
       *   tags: string[]
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Array<{
       *   id?: number
       *   // [title] Pet category
       *   // A category for a pet
       *   category?: {
       *     id?: number
       *     name?: string
       *   }
       *   name: string
       *   // [items] start
       *   // [items] end
       *   photoUrls: string[]
       *   // [items] start
       *   // [title] Pet Tag
       *   // A tag for a pet
       *   // [items] end
       *   tags?: Array<{
       *     id?: number
       *     name?: string
       *   }>
       *   // pet status in the store
       *   // [deprecated]
       *   status?: 'available' | 'pending' | 'sold'
       * }>
       * \`\`\`
       */
      findPetsByTags<
        Config extends Alova2MethodConfig<Pet[]> & {
          params: {
            /**
             * Tags to filter by
             */
            tags: string[];
          };
        }
      >(
        config: Config
      ): Alova2Method<Pet[], 'pet.findPetsByTags', Config>;
      /**
       * ---
       *
       * [GET] Find pet by ID
       *
       * **path:** /pet/{petId}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // ID of pet to return
       *   petId: number
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = {
       *   id?: number
       *   // [title] Pet category
       *   // A category for a pet
       *   category?: {
       *     id?: number
       *     name?: string
       *   }
       *   name: string
       *   // [items] start
       *   // [items] end
       *   photoUrls: string[]
       *   // [items] start
       *   // [title] Pet Tag
       *   // A tag for a pet
       *   // [items] end
       *   tags?: Array<{
       *     id?: number
       *     name?: string
       *   }>
       *   // pet status in the store
       *   // [deprecated]
       *   status?: 'available' | 'pending' | 'sold'
       * }
       * \`\`\`
       */
      getPetById<
        Config extends Alova2MethodConfig<Pet> & {
          pathParams: {
            /**
             * ID of pet to return
             */
            petId: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<Pet, 'pet.getPetById', Config>;
      /**
       * ---
       *
       * [POST] Updates a pet in the store with form data
       *
       * **path:** /pet/{petId}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // ID of pet that needs to be updated
       *   petId: number
       * }
       * \`\`\`
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   // Updated name of the pet
       *   name?: string
       *   // Updated status of the pet
       *   status?: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = unknown
       * \`\`\`
       */
      updatePetWithForm<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * ID of pet that needs to be updated
             */
            petId: number;
          };
          data: {
            /**
             * Updated name of the pet
             */
            name?: string;
            /**
             * Updated status of the pet
             */
            status?: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'pet.updatePetWithForm', Config>;
      /**
       * ---
       *
       * [DELETE] Deletes a pet
       *
       * **path:** /pet/{petId}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // Pet id to delete
       *   petId: number
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = unknown
       * \`\`\`
       */
      deletePet<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * Pet id to delete
             */
            petId: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'pet.deletePet', Config>;
      /**
       * ---
       *
       * [POST] uploads an image
       *
       * **path:** /pet/{petId}/uploadImage
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // ID of pet to update
       *   petId: number
       * }
       * \`\`\`
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   // Additional data to pass to server
       *   additionalMetadata?: string
       *   // file to upload
       *   file?: Blob
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = {
       *   code?: number
       *   type?: string
       *   message?: string
       * }
       * \`\`\`
       */
      uploadFile<
        Config extends Alova2MethodConfig<ApiResponse> & {
          pathParams: {
            /**
             * ID of pet to update
             */
            petId: number;
          };
          data: {
            /**
             * Additional data to pass to server
             */
            additionalMetadata?: string;
            /**
             * file to upload
             */
            file?: Blob;
          };
        }
      >(
        config: Config
      ): Alova2Method<ApiResponse, 'pet.uploadFile', Config>;
    };
    store: {
      /**
       * ---
       *
       * [GET] Returns pet inventories by status
       *
       * **path:** /store/inventory
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Record<string, number>
       * \`\`\`
       */
      getInventory<Config extends Alova2MethodConfig<Record<string, number>>>(
        config?: Config
      ): Alova2Method<Record<string, number>, 'store.getInventory', Config>;
      /**
       * ---
       *
       * [POST] Place an order for a pet
       *
       * **path:** /store/order
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   id?: number
       *   petId?: number
       *   quantity?: number
       *   shipDate?: string
       *   // Order Status
       *   status?: 'placed' | 'approved' | 'delivered'
       *   complete?: boolean
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = {
       *   id?: number
       *   petId?: number
       *   quantity?: number
       *   shipDate?: string
       *   // Order Status
       *   status?: 'placed' | 'approved' | 'delivered'
       *   complete?: boolean
       * }
       * \`\`\`
       */
      placeOrder<
        Config extends Alova2MethodConfig<Order> & {
          data: Order;
        }
      >(
        config: Config
      ): Alova2Method<Order, 'store.placeOrder', Config>;
      /**
       * ---
       *
       * [GET] Find purchase order by ID
       *
       * **path:** /store/order/{orderId}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // ID of pet that needs to be fetched
       *   orderId: number
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = {
       *   id?: number
       *   petId?: number
       *   quantity?: number
       *   shipDate?: string
       *   // Order Status
       *   status?: 'placed' | 'approved' | 'delivered'
       *   complete?: boolean
       * }
       * \`\`\`
       */
      getOrderById<
        Config extends Alova2MethodConfig<Order> & {
          pathParams: {
            /**
             * ID of pet that needs to be fetched
             */
            orderId: number;
          };
        }
      >(
        config: Config
      ): Alova2Method<Order, 'store.getOrderById', Config>;
      /**
       * ---
       *
       * [DELETE] Delete purchase order by ID
       *
       * **path:** /store/order/{orderId}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // ID of the order that needs to be deleted
       *   orderId: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = unknown
       * \`\`\`
       */
      deleteOrder<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * ID of the order that needs to be deleted
             */
            orderId: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'store.deleteOrder', Config>;
    };
    user: {
      /**
       * ---
       *
       * [POST] Create user
       *
       * **path:** /user
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   id?: number
       *   username?: string
       *   firstName?: string
       *   lastName?: string
       *   email?: string
       *   password?: string
       *   phone?: string
       *   // User Status
       *   userStatus?: number
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = null
       * \`\`\`
       */
      createUser<
        Config extends Alova2MethodConfig<null> & {
          data: User;
        }
      >(
        config: Config
      ): Alova2Method<null, 'user.createUser', Config>;
      /**
       * ---
       *
       * [POST] Creates list of users with given input array
       *
       * **path:** /user/createWithArray
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = Array<{
       *   id?: number
       *   username?: string
       *   firstName?: string
       *   lastName?: string
       *   email?: string
       *   password?: string
       *   phone?: string
       *   // User Status
       *   userStatus?: number
       * }>
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = null
       * \`\`\`
       */
      createUsersWithArrayInput<
        Config extends Alova2MethodConfig<null> & {
          data: User[];
        }
      >(
        config: Config
      ): Alova2Method<null, 'user.createUsersWithArrayInput', Config>;
      /**
       * ---
       *
       * [POST] Creates list of users with given input array
       *
       * **path:** /user/createWithList
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = Array<{
       *   id?: number
       *   username?: string
       *   firstName?: string
       *   lastName?: string
       *   email?: string
       *   password?: string
       *   phone?: string
       *   // User Status
       *   userStatus?: number
       * }>
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = null
       * \`\`\`
       */
      createUsersWithListInput<
        Config extends Alova2MethodConfig<null> & {
          data: User[];
        }
      >(
        config: Config
      ): Alova2Method<null, 'user.createUsersWithListInput', Config>;
      /**
       * ---
       *
       * [GET] Logs user into the system
       *
       * **path:** /user/login
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // The user name for login
       *   username: string
       *   // The password for login in clear text
       *   password: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string
       * \`\`\`
       */
      loginUser<
        Config extends Alova2MethodConfig<string> & {
          params: {
            /**
             * The user name for login
             */
            username: string;
            /**
             * The password for login in clear text
             */
            password: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<string, 'user.loginUser', Config>;
      /**
       * ---
       *
       * [GET] Logs out current logged in user session
       *
       * **path:** /user/logout
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = null
       * \`\`\`
       */
      logoutUser<Config extends Alova2MethodConfig<null>>(
        config?: Config
      ): Alova2Method<null, 'user.logoutUser', Config>;
      /**
       * ---
       *
       * [GET] Get user by user name
       *
       * **path:** /user/{username}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // The name that needs to be fetched. Use user1 for testing.
       *   username: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = {
       *   id?: number
       *   username?: string
       *   firstName?: string
       *   lastName?: string
       *   email?: string
       *   password?: string
       *   phone?: string
       *   // User Status
       *   userStatus?: number
       * }
       * \`\`\`
       */
      getUserByName<
        Config extends Alova2MethodConfig<User> & {
          pathParams: {
            /**
             * The name that needs to be fetched. Use user1 for testing.
             */
            username: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<User, 'user.getUserByName', Config>;
      /**
       * ---
       *
       * [PUT] Updated user
       *
       * **path:** /user/{username}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // name that need to be deleted
       *   username: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   id?: number
       *   username?: string
       *   firstName?: string
       *   lastName?: string
       *   email?: string
       *   password?: string
       *   phone?: string
       *   // User Status
       *   userStatus?: number
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = unknown
       * \`\`\`
       */
      updateUser<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * name that need to be deleted
             */
            username: string;
          };
          data: User;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'user.updateUser', Config>;
      /**
       * ---
       *
       * [DELETE] Delete user
       *
       * **path:** /user/{username}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // The name that needs to be deleted
       *   username: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = unknown
       * \`\`\`
       */
      deleteUser<
        Config extends Alova2MethodConfig<unknown> & {
          pathParams: {
            /**
             * The name that needs to be deleted
             */
            username: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'user.deleteUser', Config>;
    };
  }

  var Apis: Apis;
}
"
`;

exports[`generate API > should generate target versioned code 1`] = `
"/// <reference types='./globals.d.ts' />
/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Generator - version 3.0.57
 *
 * This is an online swagger codegen server.  You can find out more at https://github.com/swagger-api/swagger-codegen or on [irc.freenode.net, #swagger](http://swagger.io/irc/).
 *
 * OpenAPI version: 3.0.1
 *
 *
 * NOTE: This file is auto generated by the alova's vscode plugin.
 *
 * https://alova.js.org/devtools/vscode
 *
 * **Do not edit the file manually.**
 */
export default {
  'clients.generateFromURL': ['GET', '/generate'],
  'servers.generateFromURL': ['GET', '/generate'],
  'documentation.generateFromURL': ['GET', '/generate'],
  'config.generateFromURL': ['GET', '/generate'],
  'clients.generate': ['POST', '/generate'],
  'servers.generate': ['POST', '/generate'],
  'documentation.generate': ['POST', '/generate'],
  'config.generate': ['POST', '/generate'],
  'clients.clientLanguages': ['GET', '/clients'],
  'documentation.clientLanguages': ['GET', '/clients'],
  'servers.serverLanguages': ['GET', '/servers'],
  'documentation.documentationLanguages': ['GET', '/documentation'],
  'clients.languages': ['GET', '/{type}/{version}'],
  'servers.languages': ['GET', '/{type}/{version}'],
  'documentation.languages': ['GET', '/{type}/{version}'],
  'config.languages': ['GET', '/{type}/{version}'],
  'clients.languagesMulti': ['GET', '/types'],
  'servers.languagesMulti': ['GET', '/types'],
  'documentation.languagesMulti': ['GET', '/types'],
  'config.languagesMulti': ['GET', '/types'],
  'clients.listOptions': ['GET', '/options'],
  'servers.listOptions': ['GET', '/options'],
  'documentation.listOptions': ['GET', '/options'],
  'config.listOptions': ['GET', '/options'],
  'clients.generateBundle': ['POST', '/model'],
  'servers.generateBundle': ['POST', '/model'],
  'documentation.generateBundle': ['POST', '/model'],
  'config.generateBundle': ['POST', '/model'],
  'documentation.renderTemplate': ['POST', '/render']
};
"
`;

exports[`generate API > should generate target versioned code 2`] = `
"import { createAlova } from 'alova';
import GlobalFetch from 'alova/GlobalFetch';
import { createApis, withConfigType, mountApis } from './createApis';

export const alovaInstance = createAlova({
  baseURL: '/api1',
  requestAdapter: GlobalFetch(),
  beforeRequest: method => {},
  responded: res => {
    return res.json();
  }
});

export const $$userConfigMap = withConfigType({});

const Apis = createApis(alovaInstance, $$userConfigMap);

mountApis(Apis);

export default Apis;
"
`;

exports[`generate API > should generate target versioned code 3`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Generator - version 3.0.57
 *
 * This is an online swagger codegen server.  You can find out more at https://github.com/swagger-api/swagger-codegen or on [irc.freenode.net, #swagger](http://swagger.io/irc/).
 *
 * OpenAPI version: 3.0.1
 *
 *
 * NOTE: This file is auto generated by the alova's vscode plugin.
 *
 * https://alova.js.org/devtools/vscode
 *
 * **Do not edit the file manually.**
 */
import type { Alova, MethodType, AlovaMethodCreateConfig } from 'alova';
import { Method } from 'alova';
import apiDefinitions from './apiDefinitions';

const createFunctionalProxy = (
  array: (string | symbol)[],
  alovaInstance: Alova<any, any, any, any, any>,
  configMap: any
) => {
  // create a new proxy instance
  return new Proxy(function () {}, {
    get(_, property) {
      // record the target property, so that it can get the completed accessing paths
      const newArray = [...array, property];
      // always return a new proxy to continue recording accessing paths.
      return createFunctionalProxy(newArray, alovaInstance, configMap);
    },
    apply(_, __, [config]) {
      const apiPathKey = array.join('.') as keyof typeof apiDefinitions;
      const apiItem = apiDefinitions[apiPathKey];
      if (!apiItem) {
        throw new Error(\`the api path of \\\`\${apiPathKey}\\\` is not found\`);
      }
      const mergedConfig = {
        ...configMap[apiPathKey],
        ...config
      };
      const [method, url] = apiItem;
      const pathParams = mergedConfig.pathParams;
      const urlReplaced = url.replace(/\\{([^}]+)\\}/g, (_, key) => {
        const pathParam = pathParams[key];
        return pathParam;
      });
      delete mergedConfig.pathParams;
      let data = mergedConfig.data;
      if (Object.prototype.toString.call(data) === '[object Object]' && typeof FormData !== 'undefined') {
        let hasBlobData = false;
        const formData = new FormData();
        for (const key in data) {
          formData.append(key, data[key]);
          if (data[key] instanceof Blob) {
            hasBlobData = true;
          }
        }
        data = hasBlobData ? formData : data;
      }
      return new Method(method.toUpperCase() as MethodType, alovaInstance, urlReplaced, mergedConfig, data);
    }
  });
};

export const createApis = (alovaInstance: Alova<any, any, any, any, any>, configMap: any) => {
  const Apis = new Proxy({} as Apis, {
    get(_, property) {
      return createFunctionalProxy([property], alovaInstance, configMap);
    }
  });
  return Apis;
};
export const mountApis = (Apis: Apis) => {
  // define global variable \`Apis\`
  (globalThis as any).Apis = Apis;
};
type MethodConfig<T> =
  (typeof import('./index'))['alovaInstance'] extends Alova<any, any, infer RC, any, infer RH>
    ? import('alova').AlovaMethodCreateConfig<any, T, RC, RH>
    : never;
type APISofParameters<Tag extends string, Url extends string> = Tag extends keyof Apis
  ? Url extends keyof Apis[Tag]
    ? Apis[Tag][Url] extends (...args: any) => any
      ? Parameters<Apis[Tag][Url]>
      : any
    : any
  : any;
type MethodsConfigMap = {
  [P in keyof typeof import('./apiDefinitions').default]?: MethodConfig<
    P extends \`\${infer Tag}.\${infer Url}\`
      ? Parameters<NonNullable<APISofParameters<Tag, Url>[0]>['transformData']>[0]
      : any
  >;
};
export const withConfigType = <Config extends MethodsConfigMap>(config: Config) => config;
"
`;

exports[`generate API > should generate target versioned code 4`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Generator - version 3.0.57
 *
 * This is an online swagger codegen server.  You can find out more at https://github.com/swagger-api/swagger-codegen or on [irc.freenode.net, #swagger](http://swagger.io/irc/).
 *
 * OpenAPI version: 3.0.1
 *
 *
 * NOTE: This file is auto generated by the alova's vscode plugin.
 *
 * https://alova.js.org/devtools/vscode
 *
 * **Do not edit the file manually.**
 */
import type { Alova, AlovaMethodCreateConfig, Method } from 'alova';
import type { $$userConfigMap, alovaInstance } from '.';
import type apiDefinitions from './apiDefinitions';

type CollapsedAlova = typeof alovaInstance;
type UserMethodConfigMap = typeof $$userConfigMap;

type Alova2MethodConfig<Responded> =
  CollapsedAlova extends Alova<any, any, infer RequestConfig, any, infer ResponseHeader>
    ? Omit<AlovaMethodCreateConfig<any, Responded, RequestConfig, ResponseHeader>, 'params'>
    : never;

// Extract the return type of transformData function that define in $$userConfigMap, if it not exists, use the default type.
type ExtractUserDefinedTransformed<
  DefinitionKey extends keyof typeof apiDefinitions,
  Default
> = DefinitionKey extends keyof UserMethodConfigMap
  ? UserMethodConfigMap[DefinitionKey]['transformData'] extends (...args: any[]) => any
    ? Awaited<ReturnType<UserMethodConfigMap[DefinitionKey]['transformData']>>
    : Default
  : Default;
type Alova2Method<
  Responded,
  DefinitionKey extends keyof typeof apiDefinitions,
  CurrentConfig extends Alova2MethodConfig<any>
> =
  CollapsedAlova extends Alova<infer State, infer Export, infer RequestConfig, infer Response, infer ResponseHeader>
    ? Method<
        State,
        Export,
        CurrentConfig extends undefined
          ? ExtractUserDefinedTransformed<DefinitionKey, Responded>
          : CurrentConfig['transformData'] extends (...args: any[]) => any
            ? Awaited<ReturnType<CurrentConfig['transformData']>>
            : ExtractUserDefinedTransformed<DefinitionKey, Responded>,
        any,
        RequestConfig,
        Response,
        ResponseHeader
      >
    : never;

export interface AuthorizationValue {
  /**
   * Authorization value
   */
  value?: string;
  /**
   * Authorization key
   */
  keyName?: string;
  /**
   * Authorization type
   */
  type?: 'query' | 'header';
}
export interface Options {
  /**
   * authorization
   * ---
   * adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
   */
  auth?: string;
  /**
   * authorization
   * ---
   * adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
   */
  authorizationValue?: AuthorizationValue;
  /**
   * api package
   * ---
   * package for generated api classes
   */
  apiPackage?: string;
  /**
   * Template Version
   * ---
   * template version for generation
   */
  templateVersion?: string;
  /**
   * model package
   * ---
   * package for generated models
   */
  modelPackage?: string;
  /**
   * model name prefix
   * ---
   * Prefix that will be prepended to all model names. Default is the empty string.
   */
  modelNamePrefix?: string;
  /**
   * model name suffix
   * ---
   * PrefixSuffix that will be appended to all model names. Default is the empty string.
   */
  modelNameSuffix?: string;
  /**
   * System Properties
   * ---
   * sets specified system properties in key/value format
   */
  systemProperties?: Record<string, string>;
  /**
   * instantiation types
   * ---
   * sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
   */
  instantiationTypes?: Record<string, string>;
  /**
   * type mappings
   * ---
   * sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
   */
  typeMappings?: Record<string, string>;
  /**
   * additional properties
   * ---
   * sets additional properties that can be referenced by the mustache templates in key/value format.
   */
  additionalProperties?: Record<string, object>;
  /**
   * language specific primitives
   * ---
   * specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
   */
  languageSpecificPrimitives?: string[];
  /**
   * import mappings
   * ---
   * specifies mappings between a given class and the import that should be used for that class in key/value format.
   */
  importMappings?: Record<string, string>;
  /**
   * invoker package
   * ---
   * root package for generated code
   */
  invokerPackage?: string;
  /**
   * group id
   * ---
   * groupId in generated pom.xml
   */
  groupId?: string;
  /**
   * artifact id
   * ---
   * artifactId in generated pom.xml
   */
  artifactId?: string;
  /**
   * artifact version
   * ---
   * artifact version generated in pom.xml
   */
  artifactVersion?: string;
  /**
   * library
   * ---
   * library template (sub-template)
   */
  library?: string;
  /**
   * git user id
   * ---
   * Git user ID, e.g. swagger-api.
   */
  gitUserId?: string;
  /**
   * git repo id
   * ---
   * Git repo ID, e.g. swagger-codegen.
   */
  gitRepoId?: string;
  /**
   * release note
   * ---
   * Release note, default to 'Minor update'.
   */
  releaseNote?: string;
  /**
   * http user agent
   * ---
   * HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
   */
  httpUserAgent?: string;
  /**
   * reserved words mappings
   * ---
   * pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
   */
  reservedWordsMappings?: Record<string, string>;
  /**
   * ignore file override location
   * ---
   * Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
   */
  ignoreFileOverride?: string;
  /**
   * remove prefix of the operationId
   * ---
   * Remove prefix of operationId, e.g. config_getId => getId
   */
  removeOperationIdPrefix?: boolean;
  skipOverride?: boolean;
}
export interface GenerationRequest {
  /**
   * language
   * ---
   * language to generate (required)456
   */
  lang: string;
  /**
   * spec in json format. . Alternative to \`specURL\`
   */
  spec?: object;
  /**
   * URL of the spec in json format. Alternative to \`spec\`
   */
  specURL?: string;
  /**
   * type of the spec
   */
  type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG';
  /**
   * codegen version to use
   */
  codegenVersion?: 'V2' | 'V3';
  options?: Options;
}
export interface RenderRequest {
  /**
   * template
   * ---
   * template as string
   */
  template: string;
  /**
   * context
   * ---
   * context as string
   */
  context: string;
}
export interface CliOption {
  optionName?: string;
  description?: string;
  /**
   * Data type is based on the types supported by the JSON-Schema
   */
  type?: string;
  enum?: Record<string, string>;
  default?: string;
}
declare global {
  interface Apis {
    clients: {
      /**
       * ---
       *
       * [GET] Generates and download code. GenerationRequest input provided as JSON available at URL specified in parameter codegenOptionsURL.
       *
       * **path:** /generate
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   codegenOptionsURL: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Blob
       * \`\`\`
       */
      generateFromURL<
        Config extends Alova2MethodConfig<Blob> & {
          params: {
            codegenOptionsURL: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<Blob, 'clients.generateFromURL', Config>;
      /**
       * ---
       *
       * [POST] Generates and download code. GenerationRequest input provided as request body.
       *
       * **path:** /generate
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   codegenOptionsURL: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Blob
       * \`\`\`
       */
      generate<
        Config extends Alova2MethodConfig<Blob> & {
          params: {
            codegenOptionsURL: string;
          };
          data: GenerationRequest;
        }
      >(
        config: Config
      ): Alova2Method<Blob, 'clients.generate', Config>;
      /**
       * ---
       *
       * [GET] Deprecated, use '/{type}/{version}' instead. List generator languages of type 'client' or 'documentation' for given codegen version (defaults to V3)
       *
       * **path:** /clients
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       *   // flag to only return languages of type \`client\`
       *   clientOnly?: boolean
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      clientLanguages<
        Config extends Alova2MethodConfig<string[]> & {
          params: {
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
            /**
             * flag to only return languages of type \`client\`
             */
            clientOnly?: boolean;
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'clients.clientLanguages', Config>;
      /**
       * ---
       *
       * [GET] List generator languages of the given type and version
       *
       * **path:** /{type}/{version}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // generator type
       *   type: 'client' | 'server' | 'documentation' | 'config'
       *   // generator version used by codegen engine
       *   version: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      languages<
        Config extends Alova2MethodConfig<string[]> & {
          pathParams: {
            /**
             * generator type
             */
            type: 'client' | 'server' | 'documentation' | 'config';
            /**
             * generator version used by codegen engine
             */
            version: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'clients.languages', Config>;
      /**
       * ---
       *
       * [GET] List generator languages of version defined in 'version parameter (defaults to V3) and type included in 'types' parameter; all languages
       *
       * **path:** /types
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // comma-separated list of generator types
       *   // [items] start
       *   // [items] end
       *   types: ('client' | 'server' | 'documentation' | 'config')[]
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      languagesMulti<
        Config extends Alova2MethodConfig<string[]> & {
          params: {
            /**
             * comma-separated list of generator types
             */
            types: ('client' | 'server' | 'documentation' | 'config')[];
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'clients.languagesMulti', Config>;
      /**
       * ---
       *
       * [GET] Returns options for a given language and version (defaults to V3)
       *
       * **path:** /options
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // language
       *   language?: string
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Record<
       *   string,
       *   {
       *     optionName?: string
       *     description?: string
       *     // Data type is based on the types supported by the JSON-Schema
       *     type?: string
       *     enum?: Record<string, string>
       *     default?: string
       *   }
       * >
       * \`\`\`
       */
      listOptions<
        Config extends Alova2MethodConfig<Record<string, CliOption>> & {
          params: {
            /**
             * language
             */
            language?: string;
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<Record<string, CliOption>, 'clients.listOptions', Config>;
      /**
       * ---
       *
       * [POST] 你好Generates the intermediate model ("bundle") and returns it as a JSON. body.
       *
       * **path:** /model
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       */
      generateBundle<
        Config extends Alova2MethodConfig<GenerationRequest> & {
          data: GenerationRequest;
        }
      >(
        config: Config
      ): Alova2Method<GenerationRequest, 'clients.generateBundle', Config>;
    };
    servers: {
      /**
       * ---
       *
       * [GET] Generates and download code. GenerationRequest input provided as JSON available at URL specified in parameter codegenOptionsURL.
       *
       * **path:** /generate
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   codegenOptionsURL: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Blob
       * \`\`\`
       */
      generateFromURL<
        Config extends Alova2MethodConfig<Blob> & {
          params: {
            codegenOptionsURL: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<Blob, 'servers.generateFromURL', Config>;
      /**
       * ---
       *
       * [POST] Generates and download code. GenerationRequest input provided as request body.
       *
       * **path:** /generate
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   codegenOptionsURL: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Blob
       * \`\`\`
       */
      generate<
        Config extends Alova2MethodConfig<Blob> & {
          params: {
            codegenOptionsURL: string;
          };
          data: GenerationRequest;
        }
      >(
        config: Config
      ): Alova2Method<Blob, 'servers.generate', Config>;
      /**
       * ---
       *
       * [GET] Deprecated, use '/{type}/{version}' instead. List generator languages of type 'server' for given codegen version (defaults to V3)
       *
       * **path:** /servers
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      serverLanguages<
        Config extends Alova2MethodConfig<string[]> & {
          params: {
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'servers.serverLanguages', Config>;
      /**
       * ---
       *
       * [GET] List generator languages of the given type and version
       *
       * **path:** /{type}/{version}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // generator type
       *   type: 'client' | 'server' | 'documentation' | 'config'
       *   // generator version used by codegen engine
       *   version: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      languages<
        Config extends Alova2MethodConfig<string[]> & {
          pathParams: {
            /**
             * generator type
             */
            type: 'client' | 'server' | 'documentation' | 'config';
            /**
             * generator version used by codegen engine
             */
            version: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'servers.languages', Config>;
      /**
       * ---
       *
       * [GET] List generator languages of version defined in 'version parameter (defaults to V3) and type included in 'types' parameter; all languages
       *
       * **path:** /types
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // comma-separated list of generator types
       *   // [items] start
       *   // [items] end
       *   types: ('client' | 'server' | 'documentation' | 'config')[]
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      languagesMulti<
        Config extends Alova2MethodConfig<string[]> & {
          params: {
            /**
             * comma-separated list of generator types
             */
            types: ('client' | 'server' | 'documentation' | 'config')[];
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'servers.languagesMulti', Config>;
      /**
       * ---
       *
       * [GET] Returns options for a given language and version (defaults to V3)
       *
       * **path:** /options
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // language
       *   language?: string
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Record<
       *   string,
       *   {
       *     optionName?: string
       *     description?: string
       *     // Data type is based on the types supported by the JSON-Schema
       *     type?: string
       *     enum?: Record<string, string>
       *     default?: string
       *   }
       * >
       * \`\`\`
       */
      listOptions<
        Config extends Alova2MethodConfig<Record<string, CliOption>> & {
          params: {
            /**
             * language
             */
            language?: string;
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<Record<string, CliOption>, 'servers.listOptions', Config>;
      /**
       * ---
       *
       * [POST] 你好Generates the intermediate model ("bundle") and returns it as a JSON. body.
       *
       * **path:** /model
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       */
      generateBundle<
        Config extends Alova2MethodConfig<GenerationRequest> & {
          data: GenerationRequest;
        }
      >(
        config: Config
      ): Alova2Method<GenerationRequest, 'servers.generateBundle', Config>;
    };
    documentation: {
      /**
       * ---
       *
       * [GET] Generates and download code. GenerationRequest input provided as JSON available at URL specified in parameter codegenOptionsURL.
       *
       * **path:** /generate
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   codegenOptionsURL: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Blob
       * \`\`\`
       */
      generateFromURL<
        Config extends Alova2MethodConfig<Blob> & {
          params: {
            codegenOptionsURL: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<Blob, 'documentation.generateFromURL', Config>;
      /**
       * ---
       *
       * [POST] Generates and download code. GenerationRequest input provided as request body.
       *
       * **path:** /generate
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   codegenOptionsURL: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Blob
       * \`\`\`
       */
      generate<
        Config extends Alova2MethodConfig<Blob> & {
          params: {
            codegenOptionsURL: string;
          };
          data: GenerationRequest;
        }
      >(
        config: Config
      ): Alova2Method<Blob, 'documentation.generate', Config>;
      /**
       * ---
       *
       * [GET] Deprecated, use '/{type}/{version}' instead. List generator languages of type 'client' or 'documentation' for given codegen version (defaults to V3)
       *
       * **path:** /clients
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       *   // flag to only return languages of type \`client\`
       *   clientOnly?: boolean
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      clientLanguages<
        Config extends Alova2MethodConfig<string[]> & {
          params: {
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
            /**
             * flag to only return languages of type \`client\`
             */
            clientOnly?: boolean;
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'documentation.clientLanguages', Config>;
      /**
       * ---
       *
       * [GET] Deprecated, use '/{type}/{version}' instead. List generator languages of type 'documentation' for given codegen version (defaults to V3)
       *
       * **path:** /documentation
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      documentationLanguages<
        Config extends Alova2MethodConfig<string[]> & {
          params: {
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'documentation.documentationLanguages', Config>;
      /**
       * ---
       *
       * [GET] List generator languages of the given type and version
       *
       * **path:** /{type}/{version}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // generator type
       *   type: 'client' | 'server' | 'documentation' | 'config'
       *   // generator version used by codegen engine
       *   version: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      languages<
        Config extends Alova2MethodConfig<string[]> & {
          pathParams: {
            /**
             * generator type
             */
            type: 'client' | 'server' | 'documentation' | 'config';
            /**
             * generator version used by codegen engine
             */
            version: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'documentation.languages', Config>;
      /**
       * ---
       *
       * [GET] List generator languages of version defined in 'version parameter (defaults to V3) and type included in 'types' parameter; all languages
       *
       * **path:** /types
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // comma-separated list of generator types
       *   // [items] start
       *   // [items] end
       *   types: ('client' | 'server' | 'documentation' | 'config')[]
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      languagesMulti<
        Config extends Alova2MethodConfig<string[]> & {
          params: {
            /**
             * comma-separated list of generator types
             */
            types: ('client' | 'server' | 'documentation' | 'config')[];
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'documentation.languagesMulti', Config>;
      /**
       * ---
       *
       * [GET] Returns options for a given language and version (defaults to V3)
       *
       * **path:** /options
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // language
       *   language?: string
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Record<
       *   string,
       *   {
       *     optionName?: string
       *     description?: string
       *     // Data type is based on the types supported by the JSON-Schema
       *     type?: string
       *     enum?: Record<string, string>
       *     default?: string
       *   }
       * >
       * \`\`\`
       */
      listOptions<
        Config extends Alova2MethodConfig<Record<string, CliOption>> & {
          params: {
            /**
             * language
             */
            language?: string;
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<Record<string, CliOption>, 'documentation.listOptions', Config>;
      /**
       * ---
       *
       * [POST] 你好Generates the intermediate model ("bundle") and returns it as a JSON. body.
       *
       * **path:** /model
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       */
      generateBundle<
        Config extends Alova2MethodConfig<GenerationRequest> & {
          data: GenerationRequest;
        }
      >(
        config: Config
      ): Alova2Method<GenerationRequest, 'documentation.generateBundle', Config>;
      /**
       * ---
       *
       * [POST] render a template using the provided data
       *
       * **path:** /render
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   // [title] template
       *   // template as string
       *   template: string
       *   // [title] context
       *   // context as string
       *   context: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = null
       * \`\`\`
       */
      renderTemplate<
        Config extends Alova2MethodConfig<null> & {
          data: RenderRequest;
        }
      >(
        config: Config
      ): Alova2Method<null, 'documentation.renderTemplate', Config>;
    };
    config: {
      /**
       * ---
       *
       * [GET] Generates and download code. GenerationRequest input provided as JSON available at URL specified in parameter codegenOptionsURL.
       *
       * **path:** /generate
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   codegenOptionsURL: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Blob
       * \`\`\`
       */
      generateFromURL<
        Config extends Alova2MethodConfig<Blob> & {
          params: {
            codegenOptionsURL: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<Blob, 'config.generateFromURL', Config>;
      /**
       * ---
       *
       * [POST] Generates and download code. GenerationRequest input provided as request body.
       *
       * **path:** /generate
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   codegenOptionsURL: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Blob
       * \`\`\`
       */
      generate<
        Config extends Alova2MethodConfig<Blob> & {
          params: {
            codegenOptionsURL: string;
          };
          data: GenerationRequest;
        }
      >(
        config: Config
      ): Alova2Method<Blob, 'config.generate', Config>;
      /**
       * ---
       *
       * [GET] List generator languages of the given type and version
       *
       * **path:** /{type}/{version}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // generator type
       *   type: 'client' | 'server' | 'documentation' | 'config'
       *   // generator version used by codegen engine
       *   version: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      languages<
        Config extends Alova2MethodConfig<string[]> & {
          pathParams: {
            /**
             * generator type
             */
            type: 'client' | 'server' | 'documentation' | 'config';
            /**
             * generator version used by codegen engine
             */
            version: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'config.languages', Config>;
      /**
       * ---
       *
       * [GET] List generator languages of version defined in 'version parameter (defaults to V3) and type included in 'types' parameter; all languages
       *
       * **path:** /types
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // comma-separated list of generator types
       *   // [items] start
       *   // [items] end
       *   types: ('client' | 'server' | 'documentation' | 'config')[]
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      languagesMulti<
        Config extends Alova2MethodConfig<string[]> & {
          params: {
            /**
             * comma-separated list of generator types
             */
            types: ('client' | 'server' | 'documentation' | 'config')[];
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'config.languagesMulti', Config>;
      /**
       * ---
       *
       * [GET] Returns options for a given language and version (defaults to V3)
       *
       * **path:** /options
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // language
       *   language?: string
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Record<
       *   string,
       *   {
       *     optionName?: string
       *     description?: string
       *     // Data type is based on the types supported by the JSON-Schema
       *     type?: string
       *     enum?: Record<string, string>
       *     default?: string
       *   }
       * >
       * \`\`\`
       */
      listOptions<
        Config extends Alova2MethodConfig<Record<string, CliOption>> & {
          params: {
            /**
             * language
             */
            language?: string;
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<Record<string, CliOption>, 'config.listOptions', Config>;
      /**
       * ---
       *
       * [POST] 你好Generates the intermediate model ("bundle") and returns it as a JSON. body.
       *
       * **path:** /model
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       */
      generateBundle<
        Config extends Alova2MethodConfig<GenerationRequest> & {
          data: GenerationRequest;
        }
      >(
        config: Config
      ): Alova2Method<GenerationRequest, 'config.generateBundle', Config>;
    };
  }

  var Apis: Apis;
}
"
`;

exports[`generate API > should generate target versioned code 5`] = `
"/// <reference types='./globals.d.ts' />
/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Generator - version 3.0.57
 *
 * This is an online swagger codegen server.  You can find out more at https://github.com/swagger-api/swagger-codegen or on [irc.freenode.net, #swagger](http://swagger.io/irc/).
 *
 * OpenAPI version: 3.0.1
 *
 *
 * NOTE: This file is auto generated by the alova's vscode plugin.
 *
 * https://alova.js.org/devtools/vscode
 *
 * **Do not edit the file manually.**
 */
export default {
  'clients.generateFromURL': ['GET', '/generate'],
  'servers.generateFromURL': ['GET', '/generate'],
  'documentation.generateFromURL': ['GET', '/generate'],
  'config.generateFromURL': ['GET', '/generate'],
  'clients.generate': ['POST', '/generate'],
  'servers.generate': ['POST', '/generate'],
  'documentation.generate': ['POST', '/generate'],
  'config.generate': ['POST', '/generate'],
  'clients.clientLanguages': ['GET', '/clients'],
  'documentation.clientLanguages': ['GET', '/clients'],
  'servers.serverLanguages': ['GET', '/servers'],
  'documentation.documentationLanguages': ['GET', '/documentation'],
  'clients.languages': ['GET', '/{type}/{version}'],
  'servers.languages': ['GET', '/{type}/{version}'],
  'documentation.languages': ['GET', '/{type}/{version}'],
  'config.languages': ['GET', '/{type}/{version}'],
  'clients.languagesMulti': ['GET', '/types'],
  'servers.languagesMulti': ['GET', '/types'],
  'documentation.languagesMulti': ['GET', '/types'],
  'config.languagesMulti': ['GET', '/types'],
  'clients.listOptions': ['GET', '/options'],
  'servers.listOptions': ['GET', '/options'],
  'documentation.listOptions': ['GET', '/options'],
  'config.listOptions': ['GET', '/options'],
  'clients.generateBundle': ['POST', '/model'],
  'servers.generateBundle': ['POST', '/model'],
  'documentation.generateBundle': ['POST', '/model'],
  'config.generateBundle': ['POST', '/model'],
  'documentation.renderTemplate': ['POST', '/render']
};
"
`;

exports[`generate API > should generate target versioned code 6`] = `
"import { createAlova } from 'alova';
import fetchAdapter from 'alova/fetch';
import { createApis, withConfigType, mountApis } from './createApis';

export const alovaInstance = createAlova({
  baseURL: '/api1',
  requestAdapter: fetchAdapter(),
  beforeRequest: method => {},
  responded: res => {
    return res.json();
  }
});

export const $$userConfigMap = withConfigType({});

const Apis = createApis(alovaInstance, $$userConfigMap);

mountApis(Apis);

export default Apis;
"
`;

exports[`generate API > should generate target versioned code 7`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Generator - version 3.0.57
 *
 * This is an online swagger codegen server.  You can find out more at https://github.com/swagger-api/swagger-codegen or on [irc.freenode.net, #swagger](http://swagger.io/irc/).
 *
 * OpenAPI version: 3.0.1
 *
 *
 * NOTE: This file is auto generated by the alova's vscode plugin.
 *
 * https://alova.js.org/devtools/vscode
 *
 * **Do not edit the file manually.**
 */
import type { Alova, MethodType, AlovaGenerics, AlovaMethodCreateConfig } from 'alova';
import { Method } from 'alova';
import apiDefinitions from './apiDefinitions';

const createFunctionalProxy = (array: (string | symbol)[], alovaInstance: Alova<AlovaGenerics>, configMap: any) => {
  // create a new proxy instance
  return new Proxy(function () {}, {
    get(_, property) {
      // record the target property, so that it can get the completed accessing paths
      const newArray = [...array, property];
      // always return a new proxy to continue recording accessing paths.
      return createFunctionalProxy(newArray, alovaInstance, configMap);
    },
    apply(_, __, [config]) {
      const apiPathKey = array.join('.') as keyof typeof apiDefinitions;
      const apiItem = apiDefinitions[apiPathKey];
      if (!apiItem) {
        throw new Error(\`the api path of \\\`\${apiPathKey}\\\` is not found\`);
      }
      const mergedConfig = {
        ...configMap[apiPathKey],
        ...config
      };
      const [method, url] = apiItem;
      const pathParams = mergedConfig.pathParams;
      const urlReplaced = url.replace(/\\{([^}]+)\\}/g, (_, key) => {
        const pathParam = pathParams[key];
        return pathParam;
      });
      delete mergedConfig.pathParams;
      let data = mergedConfig.data;
      if (Object.prototype.toString.call(data) === '[object Object]' && typeof FormData !== 'undefined') {
        let hasBlobData = false;
        const formData = new FormData();
        for (const key in data) {
          formData.append(key, data[key]);
          if (data[key] instanceof Blob) {
            hasBlobData = true;
          }
        }
        data = hasBlobData ? formData : data;
      }
      return new Method(method.toUpperCase() as MethodType, alovaInstance, urlReplaced, mergedConfig, data);
    }
  });
};

export const createApis = (alovaInstance: Alova<AlovaGenerics>, configMap: any) => {
  const Apis = new Proxy({} as Apis, {
    get(_, property) {
      return createFunctionalProxy([property], alovaInstance, configMap);
    }
  });
  return Apis;
};
export const mountApis = (Apis: Apis) => {
  // define global variable \`Apis\`
  (globalThis as any).Apis = Apis;
};
type MethodConfig<T> = AlovaMethodCreateConfig<
  (typeof import('./index'))['alovaInstance'] extends Alova<infer AG> ? AG : any,
  any,
  T
>;
type APISofParameters<Tag extends string, Url extends string> = Tag extends keyof Apis
  ? Url extends keyof Apis[Tag]
    ? Apis[Tag][Url] extends (...args: any) => any
      ? Parameters<Apis[Tag][Url]>
      : any
    : any
  : any;
type MethodsConfigMap = {
  [P in keyof typeof import('./apiDefinitions').default]?: MethodConfig<
    P extends \`\${infer Tag}.\${infer Url}\` ? Parameters<NonNullable<APISofParameters<Tag, Url>[0]>['transform']>[0] : any
  >;
};
export const withConfigType = <Config extends MethodsConfigMap>(config: Config) => config;
"
`;

exports[`generate API > should generate target versioned code 8`] = `
"/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Generator - version 3.0.57
 *
 * This is an online swagger codegen server.  You can find out more at https://github.com/swagger-api/swagger-codegen or on [irc.freenode.net, #swagger](http://swagger.io/irc/).
 *
 * OpenAPI version: 3.0.1
 *
 *
 * NOTE: This file is auto generated by the alova's vscode plugin.
 *
 * https://alova.js.org/devtools/vscode
 *
 * **Do not edit the file manually.**
 */
import type { Alova, AlovaMethodCreateConfig, AlovaGenerics, Method } from 'alova';
import type { $$userConfigMap, alovaInstance } from '.';
import type apiDefinitions from './apiDefinitions';

type CollapsedAlova = typeof alovaInstance;
type UserMethodConfigMap = typeof $$userConfigMap;

type Alova2MethodConfig<Responded> =
  CollapsedAlova extends Alova<
    AlovaGenerics<
      any,
      any,
      infer RequestConfig,
      infer Response,
      infer ResponseHeader,
      infer L1Cache,
      infer L2Cache,
      infer SE
    >
  >
    ? Omit<
        AlovaMethodCreateConfig<
          AlovaGenerics<Responded, any, RequestConfig, Response, ResponseHeader, L1Cache, L2Cache, SE>,
          any,
          Responded
        >,
        'params'
      >
    : never;

// Extract the return type of transform function that define in $$userConfigMap, if it not exists, use the default type.
type ExtractUserDefinedTransformed<
  DefinitionKey extends keyof typeof apiDefinitions,
  Default
> = DefinitionKey extends keyof UserMethodConfigMap
  ? UserMethodConfigMap[DefinitionKey]['transform'] extends (...args: any[]) => any
    ? Awaited<ReturnType<UserMethodConfigMap[DefinitionKey]['transform']>>
    : Default
  : Default;
type Alova2Method<
  Responded,
  DefinitionKey extends keyof typeof apiDefinitions,
  CurrentConfig extends Alova2MethodConfig<any>
> =
  CollapsedAlova extends Alova<
    AlovaGenerics<
      any,
      any,
      infer RequestConfig,
      infer Response,
      infer ResponseHeader,
      infer L1Cache,
      infer L2Cache,
      infer SE
    >
  >
    ? Method<
        AlovaGenerics<
          CurrentConfig extends undefined
            ? ExtractUserDefinedTransformed<DefinitionKey, Responded>
            : CurrentConfig['transform'] extends (...args: any[]) => any
              ? Awaited<ReturnType<CurrentConfig['transform']>>
              : ExtractUserDefinedTransformed<DefinitionKey, Responded>,
          any,
          RequestConfig,
          Response,
          ResponseHeader,
          L1Cache,
          L2Cache,
          SE
        >
      >
    : never;

export interface AuthorizationValue {
  /**
   * Authorization value
   */
  value?: string;
  /**
   * Authorization key
   */
  keyName?: string;
  /**
   * Authorization type
   */
  type?: 'query' | 'header';
}
export interface Options {
  /**
   * authorization
   * ---
   * adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
   */
  auth?: string;
  /**
   * authorization
   * ---
   * adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
   */
  authorizationValue?: AuthorizationValue;
  /**
   * api package
   * ---
   * package for generated api classes
   */
  apiPackage?: string;
  /**
   * Template Version
   * ---
   * template version for generation
   */
  templateVersion?: string;
  /**
   * model package
   * ---
   * package for generated models
   */
  modelPackage?: string;
  /**
   * model name prefix
   * ---
   * Prefix that will be prepended to all model names. Default is the empty string.
   */
  modelNamePrefix?: string;
  /**
   * model name suffix
   * ---
   * PrefixSuffix that will be appended to all model names. Default is the empty string.
   */
  modelNameSuffix?: string;
  /**
   * System Properties
   * ---
   * sets specified system properties in key/value format
   */
  systemProperties?: Record<string, string>;
  /**
   * instantiation types
   * ---
   * sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
   */
  instantiationTypes?: Record<string, string>;
  /**
   * type mappings
   * ---
   * sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
   */
  typeMappings?: Record<string, string>;
  /**
   * additional properties
   * ---
   * sets additional properties that can be referenced by the mustache templates in key/value format.
   */
  additionalProperties?: Record<string, object>;
  /**
   * language specific primitives
   * ---
   * specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
   */
  languageSpecificPrimitives?: string[];
  /**
   * import mappings
   * ---
   * specifies mappings between a given class and the import that should be used for that class in key/value format.
   */
  importMappings?: Record<string, string>;
  /**
   * invoker package
   * ---
   * root package for generated code
   */
  invokerPackage?: string;
  /**
   * group id
   * ---
   * groupId in generated pom.xml
   */
  groupId?: string;
  /**
   * artifact id
   * ---
   * artifactId in generated pom.xml
   */
  artifactId?: string;
  /**
   * artifact version
   * ---
   * artifact version generated in pom.xml
   */
  artifactVersion?: string;
  /**
   * library
   * ---
   * library template (sub-template)
   */
  library?: string;
  /**
   * git user id
   * ---
   * Git user ID, e.g. swagger-api.
   */
  gitUserId?: string;
  /**
   * git repo id
   * ---
   * Git repo ID, e.g. swagger-codegen.
   */
  gitRepoId?: string;
  /**
   * release note
   * ---
   * Release note, default to 'Minor update'.
   */
  releaseNote?: string;
  /**
   * http user agent
   * ---
   * HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
   */
  httpUserAgent?: string;
  /**
   * reserved words mappings
   * ---
   * pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
   */
  reservedWordsMappings?: Record<string, string>;
  /**
   * ignore file override location
   * ---
   * Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
   */
  ignoreFileOverride?: string;
  /**
   * remove prefix of the operationId
   * ---
   * Remove prefix of operationId, e.g. config_getId => getId
   */
  removeOperationIdPrefix?: boolean;
  skipOverride?: boolean;
}
export interface GenerationRequest {
  /**
   * language
   * ---
   * language to generate (required)456
   */
  lang: string;
  /**
   * spec in json format. . Alternative to \`specURL\`
   */
  spec?: object;
  /**
   * URL of the spec in json format. Alternative to \`spec\`
   */
  specURL?: string;
  /**
   * type of the spec
   */
  type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG';
  /**
   * codegen version to use
   */
  codegenVersion?: 'V2' | 'V3';
  options?: Options;
}
export interface RenderRequest {
  /**
   * template
   * ---
   * template as string
   */
  template: string;
  /**
   * context
   * ---
   * context as string
   */
  context: string;
}
export interface CliOption {
  optionName?: string;
  description?: string;
  /**
   * Data type is based on the types supported by the JSON-Schema
   */
  type?: string;
  enum?: Record<string, string>;
  default?: string;
}
declare global {
  interface Apis {
    clients: {
      /**
       * ---
       *
       * [GET] Generates and download code. GenerationRequest input provided as JSON available at URL specified in parameter codegenOptionsURL.
       *
       * **path:** /generate
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   codegenOptionsURL: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Blob
       * \`\`\`
       */
      generateFromURL<
        Config extends Alova2MethodConfig<Blob> & {
          params: {
            codegenOptionsURL: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<Blob, 'clients.generateFromURL', Config>;
      /**
       * ---
       *
       * [POST] Generates and download code. GenerationRequest input provided as request body.
       *
       * **path:** /generate
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   codegenOptionsURL: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Blob
       * \`\`\`
       */
      generate<
        Config extends Alova2MethodConfig<Blob> & {
          params: {
            codegenOptionsURL: string;
          };
          data: GenerationRequest;
        }
      >(
        config: Config
      ): Alova2Method<Blob, 'clients.generate', Config>;
      /**
       * ---
       *
       * [GET] Deprecated, use '/{type}/{version}' instead. List generator languages of type 'client' or 'documentation' for given codegen version (defaults to V3)
       *
       * **path:** /clients
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       *   // flag to only return languages of type \`client\`
       *   clientOnly?: boolean
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      clientLanguages<
        Config extends Alova2MethodConfig<string[]> & {
          params: {
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
            /**
             * flag to only return languages of type \`client\`
             */
            clientOnly?: boolean;
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'clients.clientLanguages', Config>;
      /**
       * ---
       *
       * [GET] List generator languages of the given type and version
       *
       * **path:** /{type}/{version}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // generator type
       *   type: 'client' | 'server' | 'documentation' | 'config'
       *   // generator version used by codegen engine
       *   version: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      languages<
        Config extends Alova2MethodConfig<string[]> & {
          pathParams: {
            /**
             * generator type
             */
            type: 'client' | 'server' | 'documentation' | 'config';
            /**
             * generator version used by codegen engine
             */
            version: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'clients.languages', Config>;
      /**
       * ---
       *
       * [GET] List generator languages of version defined in 'version parameter (defaults to V3) and type included in 'types' parameter; all languages
       *
       * **path:** /types
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // comma-separated list of generator types
       *   // [items] start
       *   // [items] end
       *   types: ('client' | 'server' | 'documentation' | 'config')[]
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      languagesMulti<
        Config extends Alova2MethodConfig<string[]> & {
          params: {
            /**
             * comma-separated list of generator types
             */
            types: ('client' | 'server' | 'documentation' | 'config')[];
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'clients.languagesMulti', Config>;
      /**
       * ---
       *
       * [GET] Returns options for a given language and version (defaults to V3)
       *
       * **path:** /options
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // language
       *   language?: string
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Record<
       *   string,
       *   {
       *     optionName?: string
       *     description?: string
       *     // Data type is based on the types supported by the JSON-Schema
       *     type?: string
       *     enum?: Record<string, string>
       *     default?: string
       *   }
       * >
       * \`\`\`
       */
      listOptions<
        Config extends Alova2MethodConfig<Record<string, CliOption>> & {
          params: {
            /**
             * language
             */
            language?: string;
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<Record<string, CliOption>, 'clients.listOptions', Config>;
      /**
       * ---
       *
       * [POST] 你好Generates the intermediate model ("bundle") and returns it as a JSON. body.
       *
       * **path:** /model
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       */
      generateBundle<
        Config extends Alova2MethodConfig<GenerationRequest> & {
          data: GenerationRequest;
        }
      >(
        config: Config
      ): Alova2Method<GenerationRequest, 'clients.generateBundle', Config>;
    };
    servers: {
      /**
       * ---
       *
       * [GET] Generates and download code. GenerationRequest input provided as JSON available at URL specified in parameter codegenOptionsURL.
       *
       * **path:** /generate
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   codegenOptionsURL: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Blob
       * \`\`\`
       */
      generateFromURL<
        Config extends Alova2MethodConfig<Blob> & {
          params: {
            codegenOptionsURL: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<Blob, 'servers.generateFromURL', Config>;
      /**
       * ---
       *
       * [POST] Generates and download code. GenerationRequest input provided as request body.
       *
       * **path:** /generate
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   codegenOptionsURL: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Blob
       * \`\`\`
       */
      generate<
        Config extends Alova2MethodConfig<Blob> & {
          params: {
            codegenOptionsURL: string;
          };
          data: GenerationRequest;
        }
      >(
        config: Config
      ): Alova2Method<Blob, 'servers.generate', Config>;
      /**
       * ---
       *
       * [GET] Deprecated, use '/{type}/{version}' instead. List generator languages of type 'server' for given codegen version (defaults to V3)
       *
       * **path:** /servers
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      serverLanguages<
        Config extends Alova2MethodConfig<string[]> & {
          params: {
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'servers.serverLanguages', Config>;
      /**
       * ---
       *
       * [GET] List generator languages of the given type and version
       *
       * **path:** /{type}/{version}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // generator type
       *   type: 'client' | 'server' | 'documentation' | 'config'
       *   // generator version used by codegen engine
       *   version: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      languages<
        Config extends Alova2MethodConfig<string[]> & {
          pathParams: {
            /**
             * generator type
             */
            type: 'client' | 'server' | 'documentation' | 'config';
            /**
             * generator version used by codegen engine
             */
            version: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'servers.languages', Config>;
      /**
       * ---
       *
       * [GET] List generator languages of version defined in 'version parameter (defaults to V3) and type included in 'types' parameter; all languages
       *
       * **path:** /types
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // comma-separated list of generator types
       *   // [items] start
       *   // [items] end
       *   types: ('client' | 'server' | 'documentation' | 'config')[]
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      languagesMulti<
        Config extends Alova2MethodConfig<string[]> & {
          params: {
            /**
             * comma-separated list of generator types
             */
            types: ('client' | 'server' | 'documentation' | 'config')[];
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'servers.languagesMulti', Config>;
      /**
       * ---
       *
       * [GET] Returns options for a given language and version (defaults to V3)
       *
       * **path:** /options
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // language
       *   language?: string
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Record<
       *   string,
       *   {
       *     optionName?: string
       *     description?: string
       *     // Data type is based on the types supported by the JSON-Schema
       *     type?: string
       *     enum?: Record<string, string>
       *     default?: string
       *   }
       * >
       * \`\`\`
       */
      listOptions<
        Config extends Alova2MethodConfig<Record<string, CliOption>> & {
          params: {
            /**
             * language
             */
            language?: string;
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<Record<string, CliOption>, 'servers.listOptions', Config>;
      /**
       * ---
       *
       * [POST] 你好Generates the intermediate model ("bundle") and returns it as a JSON. body.
       *
       * **path:** /model
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       */
      generateBundle<
        Config extends Alova2MethodConfig<GenerationRequest> & {
          data: GenerationRequest;
        }
      >(
        config: Config
      ): Alova2Method<GenerationRequest, 'servers.generateBundle', Config>;
    };
    documentation: {
      /**
       * ---
       *
       * [GET] Generates and download code. GenerationRequest input provided as JSON available at URL specified in parameter codegenOptionsURL.
       *
       * **path:** /generate
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   codegenOptionsURL: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Blob
       * \`\`\`
       */
      generateFromURL<
        Config extends Alova2MethodConfig<Blob> & {
          params: {
            codegenOptionsURL: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<Blob, 'documentation.generateFromURL', Config>;
      /**
       * ---
       *
       * [POST] Generates and download code. GenerationRequest input provided as request body.
       *
       * **path:** /generate
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   codegenOptionsURL: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Blob
       * \`\`\`
       */
      generate<
        Config extends Alova2MethodConfig<Blob> & {
          params: {
            codegenOptionsURL: string;
          };
          data: GenerationRequest;
        }
      >(
        config: Config
      ): Alova2Method<Blob, 'documentation.generate', Config>;
      /**
       * ---
       *
       * [GET] Deprecated, use '/{type}/{version}' instead. List generator languages of type 'client' or 'documentation' for given codegen version (defaults to V3)
       *
       * **path:** /clients
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       *   // flag to only return languages of type \`client\`
       *   clientOnly?: boolean
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      clientLanguages<
        Config extends Alova2MethodConfig<string[]> & {
          params: {
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
            /**
             * flag to only return languages of type \`client\`
             */
            clientOnly?: boolean;
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'documentation.clientLanguages', Config>;
      /**
       * ---
       *
       * [GET] Deprecated, use '/{type}/{version}' instead. List generator languages of type 'documentation' for given codegen version (defaults to V3)
       *
       * **path:** /documentation
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      documentationLanguages<
        Config extends Alova2MethodConfig<string[]> & {
          params: {
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'documentation.documentationLanguages', Config>;
      /**
       * ---
       *
       * [GET] List generator languages of the given type and version
       *
       * **path:** /{type}/{version}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // generator type
       *   type: 'client' | 'server' | 'documentation' | 'config'
       *   // generator version used by codegen engine
       *   version: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      languages<
        Config extends Alova2MethodConfig<string[]> & {
          pathParams: {
            /**
             * generator type
             */
            type: 'client' | 'server' | 'documentation' | 'config';
            /**
             * generator version used by codegen engine
             */
            version: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'documentation.languages', Config>;
      /**
       * ---
       *
       * [GET] List generator languages of version defined in 'version parameter (defaults to V3) and type included in 'types' parameter; all languages
       *
       * **path:** /types
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // comma-separated list of generator types
       *   // [items] start
       *   // [items] end
       *   types: ('client' | 'server' | 'documentation' | 'config')[]
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      languagesMulti<
        Config extends Alova2MethodConfig<string[]> & {
          params: {
            /**
             * comma-separated list of generator types
             */
            types: ('client' | 'server' | 'documentation' | 'config')[];
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'documentation.languagesMulti', Config>;
      /**
       * ---
       *
       * [GET] Returns options for a given language and version (defaults to V3)
       *
       * **path:** /options
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // language
       *   language?: string
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Record<
       *   string,
       *   {
       *     optionName?: string
       *     description?: string
       *     // Data type is based on the types supported by the JSON-Schema
       *     type?: string
       *     enum?: Record<string, string>
       *     default?: string
       *   }
       * >
       * \`\`\`
       */
      listOptions<
        Config extends Alova2MethodConfig<Record<string, CliOption>> & {
          params: {
            /**
             * language
             */
            language?: string;
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<Record<string, CliOption>, 'documentation.listOptions', Config>;
      /**
       * ---
       *
       * [POST] 你好Generates the intermediate model ("bundle") and returns it as a JSON. body.
       *
       * **path:** /model
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       */
      generateBundle<
        Config extends Alova2MethodConfig<GenerationRequest> & {
          data: GenerationRequest;
        }
      >(
        config: Config
      ): Alova2Method<GenerationRequest, 'documentation.generateBundle', Config>;
      /**
       * ---
       *
       * [POST] render a template using the provided data
       *
       * **path:** /render
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   // [title] template
       *   // template as string
       *   template: string
       *   // [title] context
       *   // context as string
       *   context: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = null
       * \`\`\`
       */
      renderTemplate<
        Config extends Alova2MethodConfig<null> & {
          data: RenderRequest;
        }
      >(
        config: Config
      ): Alova2Method<null, 'documentation.renderTemplate', Config>;
    };
    config: {
      /**
       * ---
       *
       * [GET] Generates and download code. GenerationRequest input provided as JSON available at URL specified in parameter codegenOptionsURL.
       *
       * **path:** /generate
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   codegenOptionsURL: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Blob
       * \`\`\`
       */
      generateFromURL<
        Config extends Alova2MethodConfig<Blob> & {
          params: {
            codegenOptionsURL: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<Blob, 'config.generateFromURL', Config>;
      /**
       * ---
       *
       * [POST] Generates and download code. GenerationRequest input provided as request body.
       *
       * **path:** /generate
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   codegenOptionsURL: string
       * }
       * \`\`\`
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Blob
       * \`\`\`
       */
      generate<
        Config extends Alova2MethodConfig<Blob> & {
          params: {
            codegenOptionsURL: string;
          };
          data: GenerationRequest;
        }
      >(
        config: Config
      ): Alova2Method<Blob, 'config.generate', Config>;
      /**
       * ---
       *
       * [GET] List generator languages of the given type and version
       *
       * **path:** /{type}/{version}
       *
       * ---
       *
       * **Path Parameters**
       * \`\`\`ts
       * type PathParameters = {
       *   // generator type
       *   type: 'client' | 'server' | 'documentation' | 'config'
       *   // generator version used by codegen engine
       *   version: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      languages<
        Config extends Alova2MethodConfig<string[]> & {
          pathParams: {
            /**
             * generator type
             */
            type: 'client' | 'server' | 'documentation' | 'config';
            /**
             * generator version used by codegen engine
             */
            version: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'config.languages', Config>;
      /**
       * ---
       *
       * [GET] List generator languages of version defined in 'version parameter (defaults to V3) and type included in 'types' parameter; all languages
       *
       * **path:** /types
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // comma-separated list of generator types
       *   // [items] start
       *   // [items] end
       *   types: ('client' | 'server' | 'documentation' | 'config')[]
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = string[]
       * \`\`\`
       */
      languagesMulti<
        Config extends Alova2MethodConfig<string[]> & {
          params: {
            /**
             * comma-separated list of generator types
             */
            types: ('client' | 'server' | 'documentation' | 'config')[];
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'config.languagesMulti', Config>;
      /**
       * ---
       *
       * [GET] Returns options for a given language and version (defaults to V3)
       *
       * **path:** /options
       *
       * ---
       *
       * **Query Parameters**
       * \`\`\`ts
       * type QueryParameters = {
       *   // language
       *   language?: string
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = Record<
       *   string,
       *   {
       *     optionName?: string
       *     description?: string
       *     // Data type is based on the types supported by the JSON-Schema
       *     type?: string
       *     enum?: Record<string, string>
       *     default?: string
       *   }
       * >
       * \`\`\`
       */
      listOptions<
        Config extends Alova2MethodConfig<Record<string, CliOption>> & {
          params: {
            /**
             * language
             */
            language?: string;
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<Record<string, CliOption>, 'config.listOptions', Config>;
      /**
       * ---
       *
       * [POST] 你好Generates the intermediate model ("bundle") and returns it as a JSON. body.
       *
       * **path:** /model
       *
       * ---
       *
       * **RequestBody**
       * \`\`\`ts
       * type RequestBody = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       *
       * ---
       *
       * **Response**
       * \`\`\`ts
       * type Response = {
       *   // [title] language
       *   // language to generate (required)456
       *   lang: string
       *   // spec in json format. . Alternative to \`specURL\`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to \`spec\`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     // [items] start
       *     // [items] end
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * \`\`\`
       */
      generateBundle<
        Config extends Alova2MethodConfig<GenerationRequest> & {
          data: GenerationRequest;
        }
      >(
        config: Config
      ): Alova2Method<GenerationRequest, 'config.generateBundle', Config>;
    };
  }

  var Apis: Apis;
}
"
`;
