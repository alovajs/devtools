/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Generator - version 3.0.57
 *
 * This is an online swagger codegen server.  You can find out more at https://github.com/swagger-api/swagger-codegen or on [irc.freenode.net, #swagger](http://swagger.io/irc/).
 *
 * OpenAPI version: 3.0.1
 *
 *
 * NOTE: This file is auto generated by the alova's vscode plugin.
 *
 * https://alova.js.org/devtools/vscode
 *
 * **Do not edit the file manually.**
 */
import type { Alova, AlovaMethodCreateConfig, Method } from 'alova';
import type { $$userConfigMap, alovaInstance } from '.';
import type apiDefinitions from './apiDefinitions';

type CollapsedAlova = typeof alovaInstance;
type UserMethodConfigMap = typeof $$userConfigMap;

type Alova2MethodConfig<Responded> =
  CollapsedAlova extends Alova<any, any, infer RequestConfig, any, infer ResponseHeader>
    ? Omit<AlovaMethodCreateConfig<any, Responded, RequestConfig, ResponseHeader>, 'params'>
    : never;

// Extract the return type of transformData function that define in $$userConfigMap, if it not exists, use the default type.
type ExtractUserDefinedTransformed<
  DefinitionKey extends keyof typeof apiDefinitions,
  Default
> = DefinitionKey extends keyof UserMethodConfigMap
  ? UserMethodConfigMap[DefinitionKey]['transformData'] extends (...args: any[]) => any
    ? Awaited<ReturnType<UserMethodConfigMap[DefinitionKey]['transformData']>>
    : Default
  : Default;
type Alova2Method<
  Responded,
  DefinitionKey extends keyof typeof apiDefinitions,
  CurrentConfig extends Alova2MethodConfig<any>
> =
  CollapsedAlova extends Alova<infer State, infer Export, infer RequestConfig, infer Response, infer ResponseHeader>
    ? Method<
        State,
        Export,
        CurrentConfig extends undefined
          ? ExtractUserDefinedTransformed<DefinitionKey, Responded>
          : CurrentConfig['transformData'] extends (...args: any[]) => any
            ? Awaited<ReturnType<CurrentConfig['transformData']>>
            : ExtractUserDefinedTransformed<DefinitionKey, Responded>,
        any,
        RequestConfig,
        Response,
        ResponseHeader
      >
    : never;

export type AuthorizationValue = {
  /**
   * Authorization value
   */
  value?: string;
  /**
   * Authorization key
   */
  keyName?: string;
  /**
   * Authorization type
   */
  type?: 'query' | 'header';
};
export type Options = {
  /**
   * authorization
   * ---
   * adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
   */
  auth?: string;
  /**
   * authorization
   * ---
   * adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
   */
  authorizationValue?: AuthorizationValue;
  /**
   * api package
   * ---
   * package for generated api classes
   */
  apiPackage?: string;
  /**
   * Template Version
   * ---
   * template version for generation
   */
  templateVersion?: string;
  /**
   * model package
   * ---
   * package for generated models
   */
  modelPackage?: string;
  /**
   * model name prefix
   * ---
   * Prefix that will be prepended to all model names. Default is the empty string.
   */
  modelNamePrefix?: string;
  /**
   * model name suffix
   * ---
   * PrefixSuffix that will be appended to all model names. Default is the empty string.
   */
  modelNameSuffix?: string;
  /**
   * System Properties
   * ---
   * sets specified system properties in key/value format
   */
  systemProperties?: Record<string, string>;
  /**
   * instantiation types
   * ---
   * sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
   */
  instantiationTypes?: Record<string, string>;
  /**
   * type mappings
   * ---
   * sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
   */
  typeMappings?: Record<string, string>;
  /**
   * additional properties
   * ---
   * sets additional properties that can be referenced by the mustache templates in key/value format.
   */
  additionalProperties?: Record<string, object>;
  /**
   * language specific primitives
   * ---
   * specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
   */
  languageSpecificPrimitives?: string[];
  /**
   * import mappings
   * ---
   * specifies mappings between a given class and the import that should be used for that class in key/value format.
   */
  importMappings?: Record<string, string>;
  /**
   * invoker package
   * ---
   * root package for generated code
   */
  invokerPackage?: string;
  /**
   * group id
   * ---
   * groupId in generated pom.xml
   */
  groupId?: string;
  /**
   * artifact id
   * ---
   * artifactId in generated pom.xml
   */
  artifactId?: string;
  /**
   * artifact version
   * ---
   * artifact version generated in pom.xml
   */
  artifactVersion?: string;
  /**
   * library
   * ---
   * library template (sub-template)
   */
  library?: string;
  /**
   * git user id
   * ---
   * Git user ID, e.g. swagger-api.
   */
  gitUserId?: string;
  /**
   * git repo id
   * ---
   * Git repo ID, e.g. swagger-codegen.
   */
  gitRepoId?: string;
  /**
   * release note
   * ---
   * Release note, default to 'Minor update'.
   */
  releaseNote?: string;
  /**
   * http user agent
   * ---
   * HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
   */
  httpUserAgent?: string;
  /**
   * reserved words mappings
   * ---
   * pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
   */
  reservedWordsMappings?: Record<string, string>;
  /**
   * ignore file override location
   * ---
   * Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
   */
  ignoreFileOverride?: string;
  /**
   * remove prefix of the operationId
   * ---
   * Remove prefix of operationId, e.g. config_getId => getId
   */
  removeOperationIdPrefix?: boolean;
  skipOverride?: boolean;
};
export type GenerationRequest = {
  /**
   * language
   * ---
   * language to generate (required)456
   * [required]
   */
  lang: string;
  /**
   * spec in json format. . Alternative to `specURL`
   */
  spec?: object;
  /**
   * URL of the spec in json format. Alternative to `spec`
   */
  specURL?: string;
  /**
   * type of the spec
   */
  type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG';
  /**
   * codegen version to use
   */
  codegenVersion?: 'V2' | 'V3';
  options?: Options;
};
export type CliOption = {
  optionName?: string;
  description?: string;
  /**
   * Data type is based on the types supported by the JSON-Schema
   */
  type?: string;
  enum?: Record<string, string>;
  default?: string;
};
export type RenderRequest = {
  /**
   * template
   * ---
   * template as string
   * [required]
   */
  template: string;
  /**
   * context
   * ---
   * context as string
   * [required]
   */
  context: string;
};
declare global {
  interface Apis {
    clients: {
      /**
       * ---
       *
       * [GET] Generates and download code. GenerationRequest input provided as JSON available at URL specified in parameter codegenOptionsURL.
       *
       * **path:** /generate
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // [required]
       *   codegenOptionsURL: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = Blob
       * ```
       */
      generateFromURL<
        Config extends Alova2MethodConfig<Blob> & {
          params: {
            /**
             * [required]
             */
            codegenOptionsURL: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<Blob, 'clients.generateFromURL', Config>;
      /**
       * ---
       *
       * [POST] Generates and download code. GenerationRequest input provided as request body.
       *
       * **path:** /generate
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // [required]
       *   codegenOptionsURL: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] language
       *   // language to generate (required)456
       *   // [required]
       *   lang: string
       *   // spec in json format. . Alternative to `specURL`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to `spec`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = Blob
       * ```
       */
      generate<
        Config extends Alova2MethodConfig<Blob> & {
          params: {
            /**
             * [required]
             */
            codegenOptionsURL: string;
          };
          data: GenerationRequest;
        }
      >(
        config: Config
      ): Alova2Method<Blob, 'clients.generate', Config>;
      /**
       * ---
       *
       * [GET] Deprecated, use '/{type}/{version}' instead. List generator languages of type 'client' or 'documentation' for given codegen version (defaults to V3)
       *
       * **path:** /clients
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       *   // flag to only return languages of type `client`
       *   clientOnly?: boolean
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = string[]
       * ```
       */
      clientLanguages<
        Config extends Alova2MethodConfig<string[]> & {
          params: {
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
            /**
             * flag to only return languages of type `client`
             */
            clientOnly?: boolean;
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'clients.clientLanguages', Config>;
      /**
       * ---
       *
       * [GET] List generator languages of the given type and version
       *
       * **path:** /{type}/{version}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // generator type
       *   // [required]
       *   type: 'client' | 'server' | 'documentation' | 'config'
       *   // generator version used by codegen engine
       *   // [required]
       *   version: 'V2' | 'V3'
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = string[]
       * ```
       */
      languages<
        Config extends Alova2MethodConfig<string[]> & {
          pathParams: {
            /**
             * generator type
             * [required]
             */
            type: 'client' | 'server' | 'documentation' | 'config';
            /**
             * generator version used by codegen engine
             * [required]
             */
            version: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'clients.languages', Config>;
      /**
       * ---
       *
       * [GET] List generator languages of version defined in 'version parameter (defaults to V3) and type included in 'types' parameter; all languages
       *
       * **path:** /types
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // comma-separated list of generator types
       *   // [required]
       *   types: ('client' | 'server' | 'documentation' | 'config')[]
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = string[]
       * ```
       */
      languagesMulti<
        Config extends Alova2MethodConfig<string[]> & {
          params: {
            /**
             * comma-separated list of generator types
             * [required]
             */
            types: ('client' | 'server' | 'documentation' | 'config')[];
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'clients.languagesMulti', Config>;
      /**
       * ---
       *
       * [GET] Returns options for a given language and version (defaults to V3)
       *
       * **path:** /options
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // language
       *   language?: string
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = Record<
       *   string,
       *   {
       *     optionName?: string
       *     description?: string
       *     // Data type is based on the types supported by the JSON-Schema
       *     type?: string
       *     enum?: Record<string, string>
       *     default?: string
       *   }
       * >
       * ```
       */
      listOptions<
        Config extends Alova2MethodConfig<Record<string, CliOption>> & {
          params: {
            /**
             * language
             */
            language?: string;
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<Record<string, CliOption>, 'clients.listOptions', Config>;
      /**
       * ---
       *
       * [POST] 你好Generates the intermediate model ("bundle") and returns it as a JSON. body.
       *
       * **path:** /model
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] language
       *   // language to generate (required)456
       *   // [required]
       *   lang: string
       *   // spec in json format. . Alternative to `specURL`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to `spec`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [title] language
       *   // language to generate (required)456
       *   // [required]
       *   lang: string
       *   // spec in json format. . Alternative to `specURL`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to `spec`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * ```
       */
      generateBundle<
        Config extends Alova2MethodConfig<GenerationRequest> & {
          data: GenerationRequest;
        }
      >(
        config: Config
      ): Alova2Method<GenerationRequest, 'clients.generateBundle', Config>;
    };
    servers: {
      /**
       * ---
       *
       * [GET] Generates and download code. GenerationRequest input provided as JSON available at URL specified in parameter codegenOptionsURL.
       *
       * **path:** /generate
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // [required]
       *   codegenOptionsURL: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = Blob
       * ```
       */
      generateFromURL<
        Config extends Alova2MethodConfig<Blob> & {
          params: {
            /**
             * [required]
             */
            codegenOptionsURL: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<Blob, 'servers.generateFromURL', Config>;
      /**
       * ---
       *
       * [POST] Generates and download code. GenerationRequest input provided as request body.
       *
       * **path:** /generate
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // [required]
       *   codegenOptionsURL: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] language
       *   // language to generate (required)456
       *   // [required]
       *   lang: string
       *   // spec in json format. . Alternative to `specURL`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to `spec`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = Blob
       * ```
       */
      generate<
        Config extends Alova2MethodConfig<Blob> & {
          params: {
            /**
             * [required]
             */
            codegenOptionsURL: string;
          };
          data: GenerationRequest;
        }
      >(
        config: Config
      ): Alova2Method<Blob, 'servers.generate', Config>;
      /**
       * ---
       *
       * [GET] Deprecated, use '/{type}/{version}' instead. List generator languages of type 'server' for given codegen version (defaults to V3)
       *
       * **path:** /servers
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = string[]
       * ```
       */
      serverLanguages<
        Config extends Alova2MethodConfig<string[]> & {
          params: {
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'servers.serverLanguages', Config>;
      /**
       * ---
       *
       * [GET] List generator languages of the given type and version
       *
       * **path:** /{type}/{version}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // generator type
       *   // [required]
       *   type: 'client' | 'server' | 'documentation' | 'config'
       *   // generator version used by codegen engine
       *   // [required]
       *   version: 'V2' | 'V3'
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = string[]
       * ```
       */
      languages<
        Config extends Alova2MethodConfig<string[]> & {
          pathParams: {
            /**
             * generator type
             * [required]
             */
            type: 'client' | 'server' | 'documentation' | 'config';
            /**
             * generator version used by codegen engine
             * [required]
             */
            version: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'servers.languages', Config>;
      /**
       * ---
       *
       * [GET] List generator languages of version defined in 'version parameter (defaults to V3) and type included in 'types' parameter; all languages
       *
       * **path:** /types
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // comma-separated list of generator types
       *   // [required]
       *   types: ('client' | 'server' | 'documentation' | 'config')[]
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = string[]
       * ```
       */
      languagesMulti<
        Config extends Alova2MethodConfig<string[]> & {
          params: {
            /**
             * comma-separated list of generator types
             * [required]
             */
            types: ('client' | 'server' | 'documentation' | 'config')[];
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'servers.languagesMulti', Config>;
      /**
       * ---
       *
       * [GET] Returns options for a given language and version (defaults to V3)
       *
       * **path:** /options
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // language
       *   language?: string
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = Record<
       *   string,
       *   {
       *     optionName?: string
       *     description?: string
       *     // Data type is based on the types supported by the JSON-Schema
       *     type?: string
       *     enum?: Record<string, string>
       *     default?: string
       *   }
       * >
       * ```
       */
      listOptions<
        Config extends Alova2MethodConfig<Record<string, CliOption>> & {
          params: {
            /**
             * language
             */
            language?: string;
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<Record<string, CliOption>, 'servers.listOptions', Config>;
      /**
       * ---
       *
       * [POST] 你好Generates the intermediate model ("bundle") and returns it as a JSON. body.
       *
       * **path:** /model
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] language
       *   // language to generate (required)456
       *   // [required]
       *   lang: string
       *   // spec in json format. . Alternative to `specURL`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to `spec`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [title] language
       *   // language to generate (required)456
       *   // [required]
       *   lang: string
       *   // spec in json format. . Alternative to `specURL`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to `spec`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * ```
       */
      generateBundle<
        Config extends Alova2MethodConfig<GenerationRequest> & {
          data: GenerationRequest;
        }
      >(
        config: Config
      ): Alova2Method<GenerationRequest, 'servers.generateBundle', Config>;
    };
    documentation: {
      /**
       * ---
       *
       * [GET] Generates and download code. GenerationRequest input provided as JSON available at URL specified in parameter codegenOptionsURL.
       *
       * **path:** /generate
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // [required]
       *   codegenOptionsURL: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = Blob
       * ```
       */
      generateFromURL<
        Config extends Alova2MethodConfig<Blob> & {
          params: {
            /**
             * [required]
             */
            codegenOptionsURL: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<Blob, 'documentation.generateFromURL', Config>;
      /**
       * ---
       *
       * [POST] Generates and download code. GenerationRequest input provided as request body.
       *
       * **path:** /generate
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // [required]
       *   codegenOptionsURL: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] language
       *   // language to generate (required)456
       *   // [required]
       *   lang: string
       *   // spec in json format. . Alternative to `specURL`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to `spec`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = Blob
       * ```
       */
      generate<
        Config extends Alova2MethodConfig<Blob> & {
          params: {
            /**
             * [required]
             */
            codegenOptionsURL: string;
          };
          data: GenerationRequest;
        }
      >(
        config: Config
      ): Alova2Method<Blob, 'documentation.generate', Config>;
      /**
       * ---
       *
       * [GET] Deprecated, use '/{type}/{version}' instead. List generator languages of type 'client' or 'documentation' for given codegen version (defaults to V3)
       *
       * **path:** /clients
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       *   // flag to only return languages of type `client`
       *   clientOnly?: boolean
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = string[]
       * ```
       */
      clientLanguages<
        Config extends Alova2MethodConfig<string[]> & {
          params: {
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
            /**
             * flag to only return languages of type `client`
             */
            clientOnly?: boolean;
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'documentation.clientLanguages', Config>;
      /**
       * ---
       *
       * [GET] Deprecated, use '/{type}/{version}' instead. List generator languages of type 'documentation' for given codegen version (defaults to V3)
       *
       * **path:** /documentation
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = string[]
       * ```
       */
      documentationLanguages<
        Config extends Alova2MethodConfig<string[]> & {
          params: {
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'documentation.documentationLanguages', Config>;
      /**
       * ---
       *
       * [GET] List generator languages of the given type and version
       *
       * **path:** /{type}/{version}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // generator type
       *   // [required]
       *   type: 'client' | 'server' | 'documentation' | 'config'
       *   // generator version used by codegen engine
       *   // [required]
       *   version: 'V2' | 'V3'
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = string[]
       * ```
       */
      languages<
        Config extends Alova2MethodConfig<string[]> & {
          pathParams: {
            /**
             * generator type
             * [required]
             */
            type: 'client' | 'server' | 'documentation' | 'config';
            /**
             * generator version used by codegen engine
             * [required]
             */
            version: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'documentation.languages', Config>;
      /**
       * ---
       *
       * [GET] List generator languages of version defined in 'version parameter (defaults to V3) and type included in 'types' parameter; all languages
       *
       * **path:** /types
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // comma-separated list of generator types
       *   // [required]
       *   types: ('client' | 'server' | 'documentation' | 'config')[]
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = string[]
       * ```
       */
      languagesMulti<
        Config extends Alova2MethodConfig<string[]> & {
          params: {
            /**
             * comma-separated list of generator types
             * [required]
             */
            types: ('client' | 'server' | 'documentation' | 'config')[];
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'documentation.languagesMulti', Config>;
      /**
       * ---
       *
       * [GET] Returns options for a given language and version (defaults to V3)
       *
       * **path:** /options
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // language
       *   language?: string
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = Record<
       *   string,
       *   {
       *     optionName?: string
       *     description?: string
       *     // Data type is based on the types supported by the JSON-Schema
       *     type?: string
       *     enum?: Record<string, string>
       *     default?: string
       *   }
       * >
       * ```
       */
      listOptions<
        Config extends Alova2MethodConfig<Record<string, CliOption>> & {
          params: {
            /**
             * language
             */
            language?: string;
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<Record<string, CliOption>, 'documentation.listOptions', Config>;
      /**
       * ---
       *
       * [POST] 你好Generates the intermediate model ("bundle") and returns it as a JSON. body.
       *
       * **path:** /model
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] language
       *   // language to generate (required)456
       *   // [required]
       *   lang: string
       *   // spec in json format. . Alternative to `specURL`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to `spec`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [title] language
       *   // language to generate (required)456
       *   // [required]
       *   lang: string
       *   // spec in json format. . Alternative to `specURL`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to `spec`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * ```
       */
      generateBundle<
        Config extends Alova2MethodConfig<GenerationRequest> & {
          data: GenerationRequest;
        }
      >(
        config: Config
      ): Alova2Method<GenerationRequest, 'documentation.generateBundle', Config>;
      /**
       * ---
       *
       * [POST] render a template using the provided data
       *
       * **path:** /render
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] template
       *   // template as string
       *   // [required]
       *   template: string
       *   // [title] context
       *   // context as string
       *   // [required]
       *   context: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = unknown
       * ```
       */
      renderTemplate<
        Config extends Alova2MethodConfig<unknown> & {
          data: RenderRequest;
        }
      >(
        config: Config
      ): Alova2Method<unknown, 'documentation.renderTemplate', Config>;
    };
    config: {
      /**
       * ---
       *
       * [GET] Generates and download code. GenerationRequest input provided as JSON available at URL specified in parameter codegenOptionsURL.
       *
       * **path:** /generate
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // [required]
       *   codegenOptionsURL: string
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = Blob
       * ```
       */
      generateFromURL<
        Config extends Alova2MethodConfig<Blob> & {
          params: {
            /**
             * [required]
             */
            codegenOptionsURL: string;
          };
        }
      >(
        config: Config
      ): Alova2Method<Blob, 'config.generateFromURL', Config>;
      /**
       * ---
       *
       * [POST] Generates and download code. GenerationRequest input provided as request body.
       *
       * **path:** /generate
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // [required]
       *   codegenOptionsURL: string
       * }
       * ```
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] language
       *   // language to generate (required)456
       *   // [required]
       *   lang: string
       *   // spec in json format. . Alternative to `specURL`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to `spec`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = Blob
       * ```
       */
      generate<
        Config extends Alova2MethodConfig<Blob> & {
          params: {
            /**
             * [required]
             */
            codegenOptionsURL: string;
          };
          data: GenerationRequest;
        }
      >(
        config: Config
      ): Alova2Method<Blob, 'config.generate', Config>;
      /**
       * ---
       *
       * [GET] List generator languages of the given type and version
       *
       * **path:** /{type}/{version}
       *
       * ---
       *
       * **Path Parameters**
       * ```ts
       * type PathParameters = {
       *   // generator type
       *   // [required]
       *   type: 'client' | 'server' | 'documentation' | 'config'
       *   // generator version used by codegen engine
       *   // [required]
       *   version: 'V2' | 'V3'
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = string[]
       * ```
       */
      languages<
        Config extends Alova2MethodConfig<string[]> & {
          pathParams: {
            /**
             * generator type
             * [required]
             */
            type: 'client' | 'server' | 'documentation' | 'config';
            /**
             * generator version used by codegen engine
             * [required]
             */
            version: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'config.languages', Config>;
      /**
       * ---
       *
       * [GET] List generator languages of version defined in 'version parameter (defaults to V3) and type included in 'types' parameter; all languages
       *
       * **path:** /types
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // comma-separated list of generator types
       *   // [required]
       *   types: ('client' | 'server' | 'documentation' | 'config')[]
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = string[]
       * ```
       */
      languagesMulti<
        Config extends Alova2MethodConfig<string[]> & {
          params: {
            /**
             * comma-separated list of generator types
             * [required]
             */
            types: ('client' | 'server' | 'documentation' | 'config')[];
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<string[], 'config.languagesMulti', Config>;
      /**
       * ---
       *
       * [GET] Returns options for a given language and version (defaults to V3)
       *
       * **path:** /options
       *
       * ---
       *
       * **Query Parameters**
       * ```ts
       * type QueryParameters = {
       *   // language
       *   language?: string
       *   // generator version used by codegen engine
       *   version?: 'V2' | 'V3'
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = Record<
       *   string,
       *   {
       *     optionName?: string
       *     description?: string
       *     // Data type is based on the types supported by the JSON-Schema
       *     type?: string
       *     enum?: Record<string, string>
       *     default?: string
       *   }
       * >
       * ```
       */
      listOptions<
        Config extends Alova2MethodConfig<Record<string, CliOption>> & {
          params: {
            /**
             * language
             */
            language?: string;
            /**
             * generator version used by codegen engine
             */
            version?: 'V2' | 'V3';
          };
        }
      >(
        config: Config
      ): Alova2Method<Record<string, CliOption>, 'config.listOptions', Config>;
      /**
       * ---
       *
       * [POST] 你好Generates the intermediate model ("bundle") and returns it as a JSON. body.
       *
       * **path:** /model
       *
       * ---
       *
       * **RequestBody**
       * ```ts
       * type RequestBody = {
       *   // [title] language
       *   // language to generate (required)456
       *   // [required]
       *   lang: string
       *   // spec in json format. . Alternative to `specURL`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to `spec`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * ```
       *
       * ---
       *
       * **Response**
       * ```ts
       * type Response = {
       *   // [title] language
       *   // language to generate (required)456
       *   // [required]
       *   lang: string
       *   // spec in json format. . Alternative to `specURL`
       *   spec?: object
       *   // URL of the spec in json format. Alternative to `spec`
       *   specURL?: string
       *   // type of the spec
       *   type?: 'CLIENT' | 'SERVER' | 'DOCUMENTATION' | 'CONFIG'
       *   // codegen version to use
       *   codegenVersion?: 'V2' | 'V3'
       *   options?: {
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in a URL-encoded string of name:header with a comma separating multiple values
       *     auth?: string
       *     // [title] authorization
       *     // adds authorization headers when fetching the open api definitions remotely. Pass in an authorizationValue object
       *     authorizationValue?: {
       *       // Authorization value
       *       value?: string
       *       // Authorization key
       *       keyName?: string
       *       // Authorization type
       *       type?: 'query' | 'header'
       *     }
       *     // [title] api package
       *     // package for generated api classes
       *     apiPackage?: string
       *     // [title] Template Version
       *     // template version for generation
       *     templateVersion?: string
       *     // [title] model package
       *     // package for generated models
       *     modelPackage?: string
       *     // [title] model name prefix
       *     // Prefix that will be prepended to all model names. Default is the empty string.
       *     modelNamePrefix?: string
       *     // [title] model name suffix
       *     // PrefixSuffix that will be appended to all model names. Default is the empty string.
       *     modelNameSuffix?: string
       *     // [title] System Properties
       *     // sets specified system properties in key/value format
       *     systemProperties?: Record<string, string>
       *     // [title] instantiation types
       *     // sets instantiation type mappings in key/value format. For example (in Java): array=ArrayList,map=HashMap. In other words array types will get instantiated as ArrayList in generated code.
       *     instantiationTypes?: Record<string, string>
       *     // [title] type mappings
       *     // sets mappings between swagger spec types and generated code types in key/value format. For example: array=List,map=Map,string=String.
       *     typeMappings?: Record<string, string>
       *     // [title] additional properties
       *     // sets additional properties that can be referenced by the mustache templates in key/value format.
       *     additionalProperties?: Record<string, object>
       *     // [title] language specific primitives
       *     // specifies additional language specific primitive types in the format of type1,type2,type3,type3. For example: String,boolean,Boolean,Double. You can also have multiple occurrences of this option.
       *     languageSpecificPrimitives?: string[]
       *     // [title] import mappings
       *     // specifies mappings between a given class and the import that should be used for that class in key/value format.
       *     importMappings?: Record<string, string>
       *     // [title] invoker package
       *     // root package for generated code
       *     invokerPackage?: string
       *     // [title] group id
       *     // groupId in generated pom.xml
       *     groupId?: string
       *     // [title] artifact id
       *     // artifactId in generated pom.xml
       *     artifactId?: string
       *     // [title] artifact version
       *     // artifact version generated in pom.xml
       *     artifactVersion?: string
       *     // [title] library
       *     // library template (sub-template)
       *     library?: string
       *     // [title] git user id
       *     // Git user ID, e.g. swagger-api.
       *     gitUserId?: string
       *     // [title] git repo id
       *     // Git repo ID, e.g. swagger-codegen.
       *     gitRepoId?: string
       *     // [title] release note
       *     // Release note, default to 'Minor update'.
       *     releaseNote?: string
       *     // [title] http user agent
       *     // HTTP user agent, e.g. codegen_csharp_api_client, default to 'Swagger-Codegen/{packageVersion}}/{language}'
       *     httpUserAgent?: string
       *     // [title] reserved words mappings
       *     // pecifies how a reserved name should be escaped to. Otherwise, the default _<name> is used. For example id=identifier.
       *     reservedWordsMappings?: Record<string, string>
       *     // [title] ignore file override location
       *     // Specifies an override location for the .swagger-codegen-ignore file. Most useful on initial generation.
       *     ignoreFileOverride?: string
       *     // [title] remove prefix of the operationId
       *     // Remove prefix of operationId, e.g. config_getId => getId
       *     removeOperationIdPrefix?: boolean
       *     skipOverride?: boolean
       *   }
       * }
       * ```
       */
      generateBundle<
        Config extends Alova2MethodConfig<GenerationRequest> & {
          data: GenerationRequest;
        }
      >(
        config: Config
      ): Alova2Method<GenerationRequest, 'config.generateBundle', Config>;
    };
  }

  var Apis: Apis;
}
