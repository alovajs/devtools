{{#if (eq type "typescript")}}
{{#if (eq alovaVersion "v3")}}
type MethodConfig<T> = AlovaMethodCreateConfig<typeof import('./{{indexFileName}}')['alovaInstance'] extends Alova<infer AG> ? AG : any, any, T>;
type APISofParameters<Tag extends string, Url extends string> = Tag extends keyof {{{global}}}
  ? Url extends keyof {{{global}}}[Tag]
    ? {{{global}}}[Tag][Url] extends (...args: any) => any
      ? Parameters<{{{global}}}[Tag][Url]>
      : any
    : any
  : any;
type MethodsConfigMap = {
  [P in keyof typeof import('./{{apiDefinitionsFileName}}').default]?: MethodConfig<
    P extends `${infer Tag}.${infer Url}` ? Parameters<NonNullable<APISofParameters<Tag, Url>[0]>['transform']>[0] : any
  >;
};
{{else if (eq alovaVersion "v2")}}
type MethodConfig<T> = typeof import('./{{indexFileName}}')['alovaInstance'] extends Alova<any, any, infer RC, any, infer RH> ? import('alova').AlovaMethodCreateConfig<any, T, RC, RH> : never;
type APISofParameters<Tag extends string, Url extends string> = Tag extends keyof {{{global}}}
  ? Url extends keyof {{{global}}}[Tag]
    ? {{{global}}}[Tag][Url] extends (...args: any) => any
      ? Parameters<{{{global}}}[Tag][Url]>
      : any
    : any
  : any;
type MethodsConfigMap = {
  [P in keyof typeof import('./{{apiDefinitionsFileName}}').default]?: MethodConfig<
    P extends `${infer Tag}.${infer Url}` ? Parameters<NonNullable<APISofParameters<Tag, Url>[0]>['transformData']>[0] : any
  >;
};
{{/if}}
{{#if (eq moduleType "ESModule")}}export {{/if}}const withConfigType = <Config extends MethodsConfigMap>(config: Config) => config;
{{else}}
{{#if (eq alovaVersion "v3")}}
/**
 * @template T
 * @typedef {import('alova').AlovaMethodCreateConfig<
 *  typeof import('./{{indexFileName}}')['alovaInstance'] extends import('alova').Alova<infer AG>
 *   ? AG
 *   : any,
 *  any,
 *  T
 *>} MethodConfig
 */
/**
 * @template {string} Tag
 * @template {string} Url
 * @typedef {Tag extends keyof {{{global}}}
 *   ? Url extends keyof {{{global}}}[Tag]
 *     ? {{{global}}}[Tag][Url] extends (...args: any) => any
 *       ? Parameters<{{{global}}}[Tag][Url]>
 *       : any
 *     : any
 *   : any
 * } APISofParameters
 */
/**
 * @typedef {{#raw "{{ " }}{{/raw}}
 *  [P in keyof typeof import('./{{apiDefinitionsFileName}}'){{#if (eq moduleType "ESModule")}}.default{{/if}}]?: MethodConfig<
 *    P extends `${infer Tag}.${infer Url}`
 *      ? Parameters<NonNullable<APISofParameters<Tag,Url>[0]>['transform']>[0]
 *      : any
 *  >
 * {{#raw "}}" }}{{/raw}} MethodsConfigMap
 */
{{else if (eq alovaVersion "v2")}}
/**
 * @template T
 * @typedef {typeof import('./{{indexFileName}}')['alovaInstance'] extends import('alova').Alova<any, any, infer RC, any, infer RH>
 *  ? import('alova').AlovaMethodCreateConfig<any, T, RC, RH>
 *  : never
 *} MethodConfig
 */
/**
 * @template {string} Tag
 * @template {string} Url
 * @typedef {Tag extends keyof {{{global}}}
 *   ? Url extends keyof {{{global}}}[Tag]
 *     ? {{{global}}}[Tag][Url] extends (...args: any) => any
 *       ? Parameters<{{{global}}}[Tag][Url]>
 *       : any
 *     : any
 *   : any
 * } APISofParameters
 */
/**
 * @typedef {{#raw "{{ " }}{{/raw}}
 *  [P in keyof typeof import('./{{apiDefinitionsFileName}}'){{#if (eq moduleType "ESModule")}}.default{{/if}}]?: MethodConfig<
 *    P extends `${infer Tag}.${infer Url}`
 *      ? Parameters<NonNullable<APISofParameters<Tag,Url>[0]>['transformData']>[0]
 *      : any
 *  >
 * {{#raw "}}" }}{{/raw}} MethodsConfigMap
 */
{{/if}}
/**
 * @template {MethodsConfigMap} Config
 * @param {Config} config
 */
{{#if (eq moduleType "ESModule")}}export {{/if}}const withConfigType = config => config;
{{/if}}
